//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "_ToolCat"
	Revision           = "1.1"
	GUID               = "{D10B2802-FE01-11D6-8BC9-0048545E8899}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)"
	Comment            = "load and save machinedata to any physical device">
	<Channels>
		<Server Name="Server0" GUID="{D10B2801-FE01-11D6-8BC9-0048545E8899}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Client Name="Lse" Required="true" Internal="false"/>
	</Channels>
	<RevDoku>
		<Owner/>
		<Dokumentation Revision="1.1" Date="2019-04-23" Author="kolott" Company="sigmatek" Description="sa42046: new virtual method LoadLabelEx() added"/>
		<Dokumentation Revision="1.0" Date="2017-07-13" Author="kolott" Company="sigmatek" Description="sa37331: 2 new methods (LoadLabel() and SaveLabel())"/>
	</RevDoku>
</Class>
*)
_ToolCat : CLASS
  //Servers:
	Server0 	: SvrChCmd_DINT;
  //Clients:
	Lse 	: CltChCmd__Lse;
  //Variables:
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION __CDECL VIRTUAL GLOBAL LoadStart
		VAR_INPUT
			pdata 	: ^_TOOLDATA;
		END_VAR
		VAR_OUTPUT
			retcode (AL) 	: BOOL;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL LoadRun
		VAR_INPUT
			pdata 	: ^_TOOLDATA;
			pres 	: ^_RESULT;
			pvar 	: ^_VARIABLE;
			pvl 	: ^_VARLABEL;
		END_VAR
		VAR_OUTPUT
			retcode (AL) 	: BOOL;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL LoadEnd
		VAR_INPUT
			pdata 	: ^_TOOLDATA;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL SaveStart
		VAR_INPUT
			pdata 	: ^_TOOLDATA;
		END_VAR
		VAR_OUTPUT
			retcode (AL) 	: BOOL;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL SaveRun
		VAR_INPUT
			pdata 	: ^_TOOLDATA;
			label 	: ^_ASCII;
			pvl 	: ^_VARIABLE;
		END_VAR
		VAR_OUTPUT
			retcode (AL) 	: BOOL;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL SaveEnd
		VAR_INPUT
			pdata 	: ^_TOOLDATA;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL ErrorOccured
		VAR_INPUT
			pdata 	: ^_TOOLDATA;
			pres 	: ^_RESULT;
			pvar 	: ^_VARIABLE;
			pvl 	: ^_VARLABEL;
		END_VAR
		VAR_OUTPUT
			retcode (AL) 	: BOOL;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL IdleRun
		VAR_INPUT
			pdata 	: ^_TOOLDATA;
		END_VAR
		VAR_OUTPUT
			retcode (AL) 	: BOOL;
		END_VAR;
				//! <Function Comment="method will be called right before variable will be written to file.&#13;&#10;pdata... pointer to tooldata&#13;&#10;label ... pointer to variablelabel&#13;&#10;station ... stationnumber of variable to write&#13;&#10;return &apos;true&apos; when variable should be written in file, on the other hand &apos;false&apos;." Name="SaveLabel"/>
	FUNCTION __CDECL VIRTUAL GLOBAL SaveLabel
		VAR_INPUT
			pdata 	: ^_TOOLDATA;
			label 	: ^CHAR;
			station 	: UDINT;
		END_VAR
		VAR_OUTPUT
			retcode (AL) 	: BOOL;
		END_VAR;
				//! <Function Comment="method will be called right before variable will be stored into machine.&#13;&#10;pdate... pointer to tooldata&#13;&#10;label ... pointer to variablelabel&#13;&#10;station ... stationnumber of variable to store&#13;&#10;return &apos;true&apos; when variable should be stored into machine, on the other hand &apos;false&apos;." Name="LoadLabel"/>
	FUNCTION __CDECL VIRTUAL GLOBAL LoadLabel
		VAR_INPUT
			pdata 	: ^_TOOLDATA;
			label 	: ^CHAR;
			station 	: UDINT;
		END_VAR
		VAR_OUTPUT
			retcode (AL) 	: BOOL;
		END_VAR;
				//! <Function Comment="method will be called right before variable will be stored into machine.&#13;&#10;pdate... pointer to tooldata&#13;&#10;label ... pointer to variablelabel&#13;&#10;pstation ... pointer to stationnumber of variable to store&#13;&#10;return &apos;true&apos; when variable should be stored into machine, on the other hand &apos;false&apos;." Name="LoadLabelEx"/>
	FUNCTION __CDECL VIRTUAL GLOBAL LoadLabelEx
		VAR_INPUT
			pdata 	: ^_TOOLDATA;
			label 	: ^CHAR;
			pstation 	: ^UDINT;
		END_VAR
		VAR_OUTPUT
			retcode (AL) 	: BOOL;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd _Lse


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB _ToolCat::@CT_
0$UINT,
2#0100000000000000$UINT, //TY__TOOLCAT
1$UINT, 1$UINT, (SIZEOF(::_ToolCat))$UINT, 
1$UINT, 1$UINT, 0$UINT, 
TO_UDINT(1013562163), "_ToolCat", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::_ToolCat.Server0.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(2759080719), "Server0", 
//Clients:
(::_ToolCat.Lse.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(299963966), "Lse", TO_UDINT(1552551876), "_Lse", 0$UINT, 128$UINT, 
END_FUNCTION


#define USER_CNT__ToolCat 11

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT__ToolCat] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION _ToolCat::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT__ToolCat, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Init		:= #Init();
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #LoadStart();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[1]		:= #LoadRun();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[2]		:= #LoadEnd();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[3]		:= #SaveStart();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[4]		:= #SaveRun();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[5]		:= #SaveEnd();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[6]		:= #ErrorOccured();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[7]		:= #IdleRun();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[8]		:= #SaveLabel();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[9]		:= #LoadLabel();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[10]		:= #LoadLabelEx();

#pragma warning (default : 74)
	Server0.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF Server0.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


//*********************Inserted from .\_ToolCat\_ToolCat_00_00.st*********************



 


#pragma warning (disable: 73)

FUNCTION VIRTUAL GLOBAL _ToolCat::Init

  if(_firstscan) then
    if(IsClientConnected(#Lse)) then
      Lse.SetThisPointer(this$^void, 0); 
    end_if; 
  end_if; 

END_FUNCTION 
FUNCTION __CDECL VIRTUAL GLOBAL _ToolCat::LoadStart
VAR_INPUT
	pdata   : ^_TOOLDATA; 
END_VAR
VAR_OUTPUT
	retcode		: BOOL;
END_VAR
  
  retcode := TRUE;

//  pdata^.care_state := pdata^.care_state or NOCARE_LIMITS;

END_FUNCTION 
FUNCTION __CDECL VIRTUAL GLOBAL _ToolCat::LoadRun
VAR_INPUT
	pdata : ^_TOOLDATA; 
	pres  : ^_RESULT;
	pvar  : ^_VARIABLE; 
	pvl   : ^_VARLABEL;
END_VAR
VAR_OUTPUT
	retcode		: BOOL;
END_VAR

  retcode := TRUE; 

END_FUNCTION 
FUNCTION __CDECL VIRTUAL GLOBAL _ToolCat::LoadEnd
VAR_INPUT
	pdata   : ^_TOOLDATA; 
END_VAR


END_FUNCTION 
FUNCTION __CDECL VIRTUAL GLOBAL _ToolCat::SaveStart
VAR_INPUT
	pdata   : ^_TOOLDATA; 
END_VAR
VAR_OUTPUT
	retcode		: BOOL;
END_VAR

  retcode := TRUE;

END_FUNCTION 
FUNCTION __CDECL VIRTUAL GLOBAL _ToolCat::SaveRun
VAR_INPUT
	pdata   : ^_TOOLDATA; 
	label	: ^_ASCII;
	pvl		: ^_VARIABLE;
END_VAR
VAR_OUTPUT
	retcode		: BOOL;
END_VAR

  retcode := TRUE; 

END_FUNCTION 
FUNCTION __CDECL VIRTUAL GLOBAL _ToolCat::SaveEnd
VAR_INPUT
	pdata   : ^_TOOLDATA; 
END_VAR

END_FUNCTION 
FUNCTION __CDECL VIRTUAL GLOBAL _ToolCat::ErrorOccured
VAR_INPUT
	pdata : ^_TOOLDATA; 
	pres  : ^_RESULT;
	pvar  : ^_VARIABLE; 
	pvl   : ^_VARLABEL;
END_VAR
VAR_OUTPUT
	retcode		: BOOL;
END_VAR

  // retcode := TRUE  system should go on like nothing happend
  // retcode := FALSE remain in error state

  retcode := true;

  case(pdata^.ToolError) of
    TE_CANTOPEN      ,
    TE_NO_TOOLCAT    ,
    TE_DISK_ERROR    ,
    TE_TOOLESSMEMORY ,
    TE_INVALID_CRC   : retcode := false;
//    TE_CANTSAVEENTRY
//    TE_NO_STATESCHEME,           // ungültiges statescheme
//    TE_NO_ACCESS,                // kein access
//    TE_NO_CHKBIT,                // ungültiges chkbit
//    TE_ERROR_LIMITS,             // grenzwertverletzung
//    TE_UNKNOWN_SERVER,           // unbekannter server
//    TE_UNKNOWN_LINE_FORMAT,      // unbekannter fileeintrag
//    TE_FILTER_DOESNT_FIT,        // filter passt nicht
  end_case;


END_FUNCTION 

FUNCTION __CDECL VIRTUAL GLOBAL _ToolCat::IdleRun
VAR_INPUT
	pdata		: ^_TOOLDATA;
END_VAR
VAR_OUTPUT
	retcode		: bool;
END_VAR

  retcode := true;

END_FUNCTION //__CDECL VIRTUAL GLOBAL _ToolCat::IdleRun

FUNCTION __CDECL VIRTUAL GLOBAL _ToolCat::SaveLabel
	VAR_INPUT
		pdata 	: ^_TOOLDATA;
		label 	: ^CHAR;
		station 	: UDINT;
	END_VAR
	VAR_OUTPUT
		retcode 	: BOOL;
	END_VAR

  retcode := true;

END_FUNCTION

FUNCTION __CDECL VIRTUAL GLOBAL _ToolCat::LoadLabel
	VAR_INPUT
		pdata 	: ^_TOOLDATA;
		label 	: ^CHAR;
		station 	: UDINT;
	END_VAR
	VAR_OUTPUT
		retcode 	: BOOL;
	END_VAR

  retcode := true;

END_FUNCTION

FUNCTION __CDECL VIRTUAL GLOBAL _ToolCat::LoadLabelEx
	VAR_INPUT
		pdata 	: ^_TOOLDATA;
		label 	: ^CHAR;
		pstation 	: ^UDINT;
	END_VAR
	VAR_OUTPUT
		retcode 	: BOOL;
	END_VAR

  retcode := true;
  
END_FUNCTION
