//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "_Bit32"
	Revision           = "0.1"
	GUID               = "{65E61F61-D785-11D5-8BC6-0048545E8899}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)"
	Comment            = "enables bitwise acces to 4 Bytes">
	<Channels>
		<Server Name="Data" GUID="{65E61F62-D785-11D5-8BC6-0048545E8899}" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false"/>
	</Channels>
	<Dependencies>
		<Files>
			<File Path=".\Class\_Bit32\Bit32.pdf"/>
			<File Path=".\Class\_Bit32\Bit32_eng.pdf"/>
		</Files>
	</Dependencies>
	<RevDoku>
		<Owner Company="sigmatek" Author="kolott"/>
		<Dokumentation Revision="0.1" Date="2011-09-28" Author="kolott" Company="sigmatek" Description="betterment datatypeconversion"/>
	</RevDoku>
</Class>
*)
_Bit32 : CLASS
  //Servers:
	Data 	: SvrChCmd_BDINT;
  //Clients:
  //Variables:
  //Functions:
				//! <Function Comment="[#ENGLISH]&#13;&#10; The behaviour of the &apos;Write&apos; method is not predefined.&#13;&#10; Usually it will be used to write data to the channel&apos;s&#13;&#10; &apos;dData&apos;-element. This can be achieved by simply un-&#13;&#10; checking the &apos;write-protection&apos;-flag in the method&apos;s&#13;&#10; context menu (right-click on &apos;Write&apos;).&#13;&#10; The default implementation of &apos;Write&apos; simply does nothing.&#13;&#10; So &apos;Write&apos; can be called for each server.&#13;&#10;" Name="Data.Write"/>
	FUNCTION VIRTUAL GLOBAL Data::Write
		VAR_INPUT
			input (EAX) 	: BDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: BDINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB _Bit32::@CT_
0$UINT,
2#0100000000000000$UINT, //TY__BIT32
0$UINT, 1$UINT, (SIZEOF(::_Bit32))$UINT, 
1$UINT, 0$UINT, 0$UINT, 
TO_UDINT(3745297859), "_Bit32", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::_Bit32.Data.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(2607161047), "Data", 
//Clients:
END_FUNCTION


#define USER_CNT__Bit32 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT__Bit32] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION _Bit32::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT__Bit32, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Write		:= #Write();
	Data.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF Data.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


//*********************Inserted from .\_Bit32\_Bit32_00_00.st*********************



 



//[#ENGLISH]
// The behaviour of the 'Write' method is not predefined.
// Usually it will be used to write data to the channel's
// 'dData'-element. This can be achieved by simply un-
// checking the 'write-protection'-flag in the method's
// context menu (right-click on 'Write').
// The default implementation of 'Write' simply does nothing.
// So 'Write' can be called for each server.
//[>input(EAX)]a 4 byte input parameter
//[<result(EAX)]a 4 byte return value with implementation specific meaning
FUNCTION VIRTUAL GLOBAL _Bit32::Data::Write
	VAR_INPUT
		input (EAX) 	: BDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: BDINT;
	END_VAR
VAR
  mydat : UDINT; 
	para  : UDINT; 
END_VAR 

  mydat := Data$UDINT; 
  para  := input$UDINT; 

  if(para and 16#80000000) then
    if(para = 16#80000000) then
	  mydat := mydat or 16#80000000; 
	else   
      mydat := mydat or (para and 16#7FFFFFFF);  
    end_if; 
  else
    if(para = 0) then
      mydat := mydat and 16#7FFFFFFF; 
    else
	  mydat := mydat and (16#FFFFFFFF xor para); 
	end_if; 
  end_if; 

  result:= mydat;
  Data  := mydat; 

END_FUNCTION //VIRTUAL GLOBAL _Bit32::Data::Write

