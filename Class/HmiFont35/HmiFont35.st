//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "HmiFont35"
	Revision           = "0.2"
	GUID               = "{CAD647BA-CFCC-49DB-84AF-0720A37FF049}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)">
	<Channels>
		<Server Name="ByteSize" GUID="{DA854267-ACAF-4AC5-BC01-745E6F3102EC}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="ClassSvr" GUID="{167AEB25-ED8E-4E75-BCA1-69AB42107BF1}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Client Name="StdLib" Required="false" Internal="false"/>
	</Channels>
	<RevDoku>
		<Owner Company="sigmatek" Author="kolott"/>
		<Dokumentation Revision="0.2" Date="2018-08-31" Author="kolott" Company="sigmatek" Description="cTor added"/>
		<Dokumentation Revision="0.1" Date="2014-03-26" Author="kolott" Company="sigmatek" Description="Innovation: ClassSvr will represent number of used fonts in hmi&#13;&#10;server ByteSize added"/>
	</RevDoku>
</Class>
*)
HmiFont35 : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	ByteSize 	: SvrCh_UDINT;
  //Clients:
	StdLib 	: CltChCmd__StdLib;
  //Variables:
  //Functions:
	
	FUNCTION HmiFont35
		VAR_OUTPUT
			ret_code 	: ConfStates;
		END_VAR;
	
	FUNCTION GLOBAL Free;
	
	FUNCTION GLOBAL Start;
	
	FUNCTION GLOBAL CreateList
		VAR_INPUT
			pfnt 	: ^void;
			size 	: UDINT;
		END_VAR
		VAR_OUTPUT
			retcode 	: ^void;
		END_VAR;
	
	FUNCTION DefaultInit;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd _StdLib


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB HmiFont35::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_HMIFONT35
0$UINT, 2$UINT, (SIZEOF(::HmiFont35))$UINT, 
2$UINT, 1$UINT, 0$UINT, 
TO_UDINT(1363967167), "HmiFont35", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::HmiFont35.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::HmiFont35.ByteSize.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1607089543), "ByteSize", 
//Clients:
(::HmiFont35.StdLib.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(584375759), "StdLib", TO_UDINT(3689364044), "_StdLib", 0$UINT, 0$UINT, 
END_FUNCTION


#define USER_CNT_HmiFont35 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_HmiFont35] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION HmiFont35::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_HmiFont35, pCmd := #vmt.CmdTable);
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ret_code	:= HmiFont35();

END_FUNCTION

//{{LSL_IMPLEMENTATION

#includeC "..\LseEasy\Create.h"

FUNCTION HmiFont35::HmiFont35
	VAR_OUTPUT
		ret_code 	: ConfStates;
	END_VAR

	ret_code := C_OK;
  ByteSize := 0;
  ClassSvr := 0;
  DefaultInit();

END_FUNCTION

FUNCTION HmiFont35::DefaultInit

END_FUNCTION

FUNCTION GLOBAL HmiFont35::Free

  DefaultInit();

END_FUNCTION

FUNCTION GLOBAL HmiFont35::Start

  Free();
  ByteSize := 0;
  ClassSvr := 0;
  
END_FUNCTION

FUNCTION GLOBAL HmiFont35::CreateList
	VAR_INPUT
		pfnt 	: ^void;
		size 	: udint;
	END_VAR
	VAR_OUTPUT
		retcode 	: ^void;
	END_VAR
  VAR
    pbox : ^_BOX_FONTLIST;
  END_VAR

  retcode := NIL;
  
  if(pfnt <> NIL) then
    retcode   := StdLib.MallocV1(size + sizeof(_BOX_FONTLIST) - 1, 0);
    
    if(retcode <> NIL) then
      pbox$^void := retcode;
      _memcpy(#pbox^.data[0], pfnt, size);
      pbox^.boxhdr.size := 0;
      end_BIGBOX_HEADER(#pbox^.boxhdr, size + sizeof(_BOX_FONTLIST) - 1);
      ClassSvr += 1;
      ByteSize += pbox^.boxhdr.size;
    end_if;
  end_if;
  
END_FUNCTION
