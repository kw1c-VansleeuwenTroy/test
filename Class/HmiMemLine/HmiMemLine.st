//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION
#include "..\..\Source\Common\hmi_nuc.h"

(*!
<Class
	Name               = "HmiMemLine"
	Revision           = "0.0"
	GUID               = "{89D84489-B4C6-432D-AFD1-C65C8E5D6FD8}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)">
	<Channels>
		<Server Name="ClassSvr" GUID="{FFE8B7BE-B78A-4770-97A0-E9615383CAF4}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Client Name="File" Required="true" Internal="false"/>
	</Channels>
	<Dependencies>
		<Files>
			<File Path=".\Source\Common\hmi_nuc.h" Include="true"/>
		</Files>
	</Dependencies>
</Class>
*)
HmiMemLine : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
  //Clients:
	File 	: CltChCmd_HmiFile;
  //Variables:
		Ptr 	: ^HMI_CTRL_LINE;
		No 	: UDINT;
  //Functions:
	
	FUNCTION HmiMemLine
		VAR_OUTPUT
			ret_code 	: ConfStates;
		END_VAR;
	
	FUNCTION GLOBAL Load
		VAR_OUTPUT
			retcode 	: BOOL;
		END_VAR;
	
	FUNCTION GLOBAL Free;
	
	FUNCTION CIRCLE_Load
		VAR_INPUT
			ptr 	: ^void;
		END_VAR;
	
	FUNCTION HMI_CTRL_LINE_Free
		VAR_INPUT
			tmp 	: ^HMI_CTRL_LINE;
		END_VAR;
	
	FUNCTION HMI_CTRL_LINE_Load
		VAR_INPUT
			tmp 	: ^HMI_CTRL_LINE;
		END_VAR;
	
	FUNCTION HMI_CTRL_LINE_Init
		VAR_INPUT
			tmp 	: ^HMI_CTRL_LINE;
		END_VAR;
	
	FUNCTION GLOBAL Get
		VAR_INPUT
			index 	: UDINT;
		END_VAR
		VAR_OUTPUT
			retcode 	: ^HMI_CTRL_LINE;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd HmiFile


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB HmiMemLine::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_HMIMEMLINE
0$UINT, 0$UINT, (SIZEOF(::HmiMemLine))$UINT, 
1$UINT, 1$UINT, 0$UINT, 
TO_UDINT(1795655540), "HmiMemLine", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::HmiMemLine.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
//Clients:
(::HmiMemLine.File.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3121273764), "File", TO_UDINT(2548286290), "HmiFile", 0$UINT, 4$UINT, 
END_FUNCTION


#define USER_CNT_HmiMemLine 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_HmiMemLine] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION HmiMemLine::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_HmiMemLine, pCmd := #vmt.CmdTable);
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ret_code	:= HmiMemLine();

END_FUNCTION

//{{LSL_IMPLEMENTATION

FUNCTION HmiMemLine::HmiMemLine
	VAR_OUTPUT
		ret_code 	: ConfStates;
	END_VAR

  No  := 0;
  Ptr := NIL;
	ret_code := C_OK;

END_FUNCTION

FUNCTION HmiMemLine::HMI_CTRL_LINE_Init
	VAR_INPUT
		tmp 	: ^HMI_CTRL_LINE;
	END_VAR
  
  init_HMI_CHKBIT(#tmp^.chkbit);
  tmp^.color  := 0;
  tmp^.attrib := 0;
  tmp^.no     := 0;
  tmp^.ptxy   := NIL;

END_FUNCTION

FUNCTION HmiMemLine::HMI_CTRL_LINE_Free
	VAR_INPUT
		tmp 	: ^HMI_CTRL_LINE;
	END_VAR
  
  free_HMI_CHKBIT(#tmp^.chkbit); 
  File.FMemory(#tmp^.ptxy$^void, 0);   
  HMI_CTRL_LINE_Init(tmp); 

END_FUNCTION

FUNCTION HmiMemLine::HMI_CTRL_LINE_Load
	VAR_INPUT
		tmp 	: ^HMI_CTRL_LINE;
	END_VAR
  VAR
    xysize : UDINT;
    ii : udint;
    pi : ^HMI_XY;
  end_var
  
  File.FRead(#tmp^.color, 1);
  File.FRead(#tmp^.attrib, 4);
  File.Read_HMI_CHKBIT(#tmp^.chkbit);
  if(File.FRead(#tmp^.no, 2) = true) then
    xysize := tmp^.no * sizeof(HMI_XY);
    if(File.FMemory(#tmp^.ptxy$^void, xysize) = true) then
      ii := tmp^.no;
      pi := tmp^.ptxy;
      while(ii) do
        File.Read_HMI_XY(pi);
        pi += sizeof(HMI_XY);
        ii -= 1;
      end_while;
    end_if;
  end_if;
  
END_FUNCTION

FUNCTION GLOBAL HmiMemLine::Free
  var 
    tmp : ^HMI_CTRL_LINE; 
  end_var

  tmp := Ptr; 
  while(No) do
    No -= 1; 
    HMI_CTRL_LINE_Free(tmp); 
    tmp += sizeof(HMI_CTRL_LINE); 
  end_while; 
  
  File.FMemory(#Ptr, 0);   
  No  := 0;
  Ptr := NIL; 

END_FUNCTION

FUNCTION GLOBAL HmiMemLine::Load
	VAR_OUTPUT
		retcode 	: BOOL;
	END_VAR
  var 
    anz : udint; 
    ptmp : ^HMI_CTRL_LINE; 
  end_var; 

  if(File.FRead(#anz, 4) = true) then
    if(File.FMemory(#Ptr$^void, anz * sizeof(HMI_CTRL_LINE)) = true) then
      ptmp := Ptr; 
      No   := anz; 
      while(anz) do
        HMI_CTRL_LINE_Init(ptmp); 
        HMI_CTRL_LINE_Load(ptmp); 
        ptmp += sizeof(HMI_CTRL_LINE); 
        anz  -= 1; 
      end_while; 
    end_if; 
  end_if; 
    
  retcode := File.FChkFile();
  ClassSvr := to_dint(No);     

END_FUNCTION

FUNCTION GLOBAL HmiMemLine::Get
	VAR_INPUT
		index 	: UDINT;
	END_VAR
	VAR_OUTPUT
		retcode 	: ^HMI_CTRL_LINE;
	END_VAR

  retcode := NIL;
  if(index < No) then
    retcode := Ptr + (index * sizeof(HMI_CTRL_LINE));
  end_if;
  
END_FUNCTION
