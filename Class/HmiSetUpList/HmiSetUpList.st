//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "HmiSetUpList"
	Revision           = "0.2"
	GUID               = "{3FB3B088-47D8-4047-8404-F522B24EE1BF}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)">
	<Channels>
	</Channels>
	<RevDoku>
		<Owner Company="sigmatek" Author="kolott"/>
		<Dokumentation Revision="0.2" Date="2018-05-24" Author="kolott" Company="sigmatek" Description="sa41119, devsw-502: new methods GetFontShemeStandard() and GetFontSchemeStandardSmall() added"/>
		<Dokumentation Revision="0.1" Date="2016-09-07" Author="kolott" Company="sigmatek" Description="sa35391: new method GetLseProjectNotice() added"/>
	</RevDoku>
	<Network Name="HmiSetUpList">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{61551BB3-118B-402B-B5AB-EC42B5B1ACDE}"
				Class      = "HmiBaseList"
				Position   = "(218,120)"
				Visualized = "false">
				<Channels>
					<Server Name="ClassSvr"/>
					<Client Name="File"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.ClassSvr" Destination="_base.ClassSvr" Vertices="(690,210),(518,210),"/>
			<Connection Source="_base.File" Destination="this.File" Vertices="(218,210),(38,210),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using HmiBaseList

HmiSetUpList : CLASS
: HmiBaseList
  //Servers:
  //Clients:
  //Variables:
		ColorBackground 	: USINT;
		ButtonColorReleased 	: USINT;
		ButtonColorPressed 	: USINT;
		ButtonColorText 	: USINT;
		TitleColorText 	: USINT;
		LimitColorText 	: USINT;
		EditorColorBack 	: USINT;
		ButtonFrame 	: USINT;
		WindowFrame 	: USINT;
		PNotice 	: ^CHAR;
		FontSchemeStd 	: USINT;
		FontSchemeStdSmall 	: USINT;
  //Functions:
	
	FUNCTION HmiSetUpList
		VAR_OUTPUT
			ret_code 	: ConfStates;
		END_VAR;
	
	FUNCTION VIRTUAL Load
		VAR_OUTPUT
			retcode 	: BOOL;
		END_VAR;
	
	FUNCTION VIRTUAL Free;
	
	FUNCTION GLOBAL GetScreenColorBack
		VAR_OUTPUT
			retcode 	: USINT;
		END_VAR;
	
	FUNCTION GLOBAL GetButColBack
		VAR_OUTPUT
			retcode 	: USINT;
		END_VAR;
	
	FUNCTION GLOBAL GetButColText
		VAR_OUTPUT
			retcode 	: USINT;
		END_VAR;
	
	FUNCTION GLOBAL GetTitleCol
		VAR_OUTPUT
			retcode 	: USINT;
		END_VAR;
	
	FUNCTION GLOBAL GetLimitCol
		VAR_OUTPUT
			retcode 	: USINT;
		END_VAR;
	
	FUNCTION GLOBAL GetWindowCol
		VAR_OUTPUT
			retcode 	: USINT;
		END_VAR;
	
	FUNCTION GLOBAL GetButtonFrame
		VAR_OUTPUT
			retcode 	: USINT;
		END_VAR;
	
	FUNCTION GLOBAL GetWindowFrame
		VAR_OUTPUT
			retcode 	: USINT;
		END_VAR;
	
	FUNCTION InitMember;
	
	FUNCTION GLOBAL GetLseProjectNotice
		VAR_OUTPUT
			retcode 	: ^CHAR;
		END_VAR;
	
	FUNCTION GLOBAL GetFontSchemeStandard
		VAR_OUTPUT
			retcode 	: USINT;
		END_VAR;
	
	FUNCTION GLOBAL GetFontSchemeStandardSmall
		VAR_OUTPUT
			retcode 	: USINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB HmiSetUpList::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_HMISETUPLIST
0$UINT, 2$UINT, (SIZEOF(::HmiSetUpList))$UINT, 
0$UINT, 0$UINT, 0$UINT, 
TO_UDINT(4172848962), "HmiSetUpList", //Class
TO_UDINT(3735923847), "HmiBaseList", 0$UINT, 0$UINT, //Baseclass
//Servers:
//Clients:
END_FUNCTION


#define USER_CNT_HmiSetUpList 2

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_HmiSetUpList] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION HmiSetUpList::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= HmiBaseList::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= HmiBaseList::ClassSvr.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, HmiBaseList::ClassSvr.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_HmiSetUpList;
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #Load();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[1]		:= #Free();

#pragma warning (default : 74)
	HmiBaseList::ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF HmiBaseList::ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ret_code	:= HmiSetUpList();

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION HmiSetUpList::HmiSetUpList
	VAR_OUTPUT
		ret_code 	: ConfStates;
	END_VAR

	ret_code := C_OK;
  InitMember();  
  
END_FUNCTION

FUNCTION HmiSetUpList::InitMember

  ColorBackground     := 0;
  ButtonColorReleased := 0;
  ButtonColorPressed  := 0;
  ButtonColorText     := 0;
  TitleColorText      := 0;
  LimitColorText      := 0;
  EditorColorBack     := 0;
  ButtonFrame         := 0;
  WindowFrame         := 0;
  PNotice             := nil;
  FontSchemeStd       := 0xFF;
  FontSchemeStdSmall  := 0xFF;

END_FUNCTION

FUNCTION VIRTUAL HmiSetUpList::Free

  if(PNotice <> nil) then
    File.Memory(#PNotice, 0);
  end_if;
  
  InitMember();

END_FUNCTION

FUNCTION VIRTUAL HmiSetUpList::Load
	VAR_OUTPUT
		retcode 	: BOOL;
	END_VAR
  VAR
    tmp : array[0..6] of usint;
    len : uint;
    pa  : ^char;
  END_VAR

  File.FRead(#ColorBackground, 1);
  
  File.FRead(#ButtonColorReleased, 1);
  File.FRead(#ButtonColorPressed, 1);
  File.FRead(#ButtonColorText, 1);
  File.FRead(#TitleColorText, 1);
  File.FRead(#LimitColorText, 1);
  File.FRead(#EditorColorBack, 1);
  File.FRead(#ButtonFrame, 1);
  File.FRead(#WindowFrame, 1);
  File.FRead(#FontSchemeStd, 1);
  File.FRead(#FontSchemeStdSmall, 1);
  
  // [1] ... color title
  // [1] ... reserverd
  // [1] ... reserverd
  // [1] ... reserverd
  // [1] ... direction on enter
  
  File.FRead(#tmp[0], 5);  // dump
  
  pa := nil;
  if(File.FRead(#len, 2) = true) then // strlen of notice
    // [2] ... länge notice-string
    // [ ..... notice-string
    if((len > 0) & (len < 16#8000)) then
      if(File.Memory(#PNotice, len+1) = true) then
        if(File.FRead(PNotice, len) = true) then
          pa := PNotice + len;
          pa^ := 0; // ascii-0-string
        end_if;
      end_if;
    end_if;
  end_if;
  
  if((pa = nil) & (PNotice <> nil)) then
    File.Memory(#PNotice, 0);
  end_if;
  
  retcode := File.FChkFile();

END_FUNCTION


FUNCTION GLOBAL HmiSetUpList::GetScreenColorBack
	VAR_OUTPUT
		retcode 	: USINT;
	END_VAR

  retcode := ColorBackground;

END_FUNCTION

FUNCTION GLOBAL HmiSetUpList::GetButColBack
	VAR_OUTPUT
		retcode 	: USINT;
	END_VAR

  retcode := ButtonColorReleased;

END_FUNCTION

FUNCTION GLOBAL HmiSetUpList::GetButColText
	VAR_OUTPUT
		retcode 	: USINT;
	END_VAR

  retcode := ButtonColorText;

END_FUNCTION

FUNCTION GLOBAL HmiSetUpList::GetTitleCol
	VAR_OUTPUT
		retcode 	: USINT;
	END_VAR

  retcode := TitleColorText;

END_FUNCTION

FUNCTION GLOBAL HmiSetUpList::GetLimitCol
	VAR_OUTPUT
		retcode 	: USINT;
	END_VAR

  retcode := LimitColorText;

END_FUNCTION

FUNCTION GLOBAL HmiSetUpList::GetWindowCol
	VAR_OUTPUT
		retcode 	: USINT;
	END_VAR

  retcode := EditorColorBack;

END_FUNCTION

FUNCTION GLOBAL HmiSetUpList::GetButtonFrame
	VAR_OUTPUT
		retcode 	: USINT;
	END_VAR
  
  retcode := ButtonFrame;

END_FUNCTION

FUNCTION GLOBAL HmiSetUpList::GetWindowFrame
	VAR_OUTPUT
		retcode 	: USINT;
	END_VAR
  
  retcode := 26;
  if(WindowFrame < 74) then
    retcode := WindowFrame;
  end_if;
  
END_FUNCTION

FUNCTION GLOBAL HmiSetUpList::GetLseProjectNotice
	VAR_OUTPUT
		retcode 	: ^char;
	END_VAR
  
  retcode := PNotice;
  
END_FUNCTION

FUNCTION GLOBAL HmiSetUpList::GetFontSchemeStandard
	VAR_OUTPUT
		retcode 	: USINT;
	END_VAR
  
  retcode := FontSchemeStd;
  
END_FUNCTION

FUNCTION GLOBAL HmiSetUpList::GetFontSchemeStandardSmall
	VAR_OUTPUT
		retcode 	: USINT;
	END_VAR
  
  retcode := FontSchemeStdSmall;
  
END_FUNCTION



