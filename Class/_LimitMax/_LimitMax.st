//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)

//{{LSL_DEFINES
#ifndef OS_STARTVERSION_SALAMANDER
#define OS_STARTVERSION_SALAMANDER  16#09000
#endif

// date Limit for Salamander-OS
#define MAXDATE_SALAMANDER_YEAR     2038
#define MAXDATE_SALAMANDER_MONTH    1
#define MAXDATE_SALAMANDER_DAY      18

// date Limit for RtOS
#define MAXDATE_RTOS_YEAR     2199
#define MAXDATE_RTOS_MONTH    12
#define MAXDATE_RTOS_DAY      31
//}}LSL_DEFINES

//{{LSL_DECLARATION

(*!
<Class
	Name               = "_LimitMax"
	Revision           = "0.2"
	GUID               = "{F02029CC-DA1F-11D7-8BCB-0048545E8899}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)"
	Comment            = "is used to display upper limit of server">
	<Channels>
		<Server
			Name           = "Server0"
			Initialize     = "false"
			Visualized     = "true"
			WriteProtected = "true">
		</Server>
	</Channels>
	<RevDoku>
		<Owner/>
		<Dokumentation Revision="0.2" Date="2016-10-20" Author="HubChr" Company="Sigmatek" Description="-) Class showed the same values for Rtos and Salamander (Maximum Date on Salamander is different!)"/>
	</RevDoku>
	<Network Name="_LimitMax">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{F02029CF-DA1F-11D7-8BCB-0048545E8899}"
				Class      = "_MyIO"
				Position   = "(270,150)"
				Visualized = "true">
				<Channels>
					<Server Name="Refresh"/>
					<Server Name="Server0"/>
					<Client Name="Graphic"/>
					<Client Name="Lse"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.Server0" Destination="_base.Server0" Vertices="(742,210),(570,240),"/>
			<Connection Source="_base.Lse" Destination="this.Lse" Vertices="(270,240),(38,210),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using _MyIO

_LimitMax : CLASS
: _MyIO
  //Servers:
  //Clients:
  //Variables:
  //Functions:
				//! <Function Comment="[#ENGLISH]&#13;&#10;this method is called everytime when system wants to redraw the io&#13;&#10;&#13;&#10;pio ....... pointer to io information&#13;&#10;pr ........ pointer to result information&#13;&#10;pv ........ pointer to io variableinformation&#13;&#10;input ..... TRUE it&apos;s an input / FALSE it&apos;s an output&#13;&#10;&#13;&#10;for the returnstatement there are 3 different possibilities&#13;&#10;_IDLE ..... the system should goon like it is (system goes on)&#13;&#10;_IDIDIT ... i did it (system is ready)&#13;&#10;_IFAILED .. i tried to do my best, but i failed (system is ready)&#13;&#10;&#13;&#10;if you want to draw the io let&apos;s return _IDIDIT&#13;&#10;" Name="Draw"/>
	FUNCTION __CDECL VIRTUAL GLOBAL Draw
		VAR_INPUT
			pio 	: ^_IO;			//! <Variable Comment="pointer to _IO information" Name="Draw.pio"/>
			pr 	: ^_RESULT;			//! <Variable Comment="pointer to _RESULT information" Name="Draw.pr"/>
			pv 	: ^_VARIABLE;			//! <Variable Comment="pointer to io _VARIABLE information" Name="Draw.pv"/>
			input 	: BOOL;			//! <Variable Comment="TRUE it&apos;s an input&#13;&#10;FALSE it&apos;s an output" Name="Draw.input"/>
		END_VAR
		VAR_OUTPUT
			retcode (EAX) 	: _DOIT;			//! <Variable Comment="for the returnstatement there are 3 different possibilities&#13;&#10;  _IDLE ..... the system should goon like it is (system goes on)&#13;&#10;  _IDIDIT ... i did it (system is ready)&#13;&#10;  _IFAILED .. i tried to do my best, but i failed (system is re" Name="Draw.retcode"/>
		END_VAR;
				//! <Function Comment="[#ENGLISH]&#13;&#10;this method is called everytime when system wants to get data for defined io.&#13;&#10;&#13;&#10;pr ........ pointer to result information&#13;&#10;pio ....... pointer to io information&#13;&#10;pv ........ pointer to io variableinformation&#13;&#10;input ..... _TRUE it&apos;s an input / _FALSE it&apos;s an output&#13;&#10;&#13;&#10;for the returnstatement there are 3 different possibilities&#13;&#10;_IDLE ..... the system should goon like it is (system goes on)&#13;&#10;_IDIDIT ... i did it (system is ready)&#13;&#10;_IFAILED .. i tried to do my best, but i failed (system is ready)&#13;&#10;&#13;&#10;if you want to do it let&apos;s return _IDIDIT and initialize the  structure _RESULT&#13;&#10;" Name="GetData"/>
	FUNCTION __CDECL VIRTUAL GLOBAL GetData
		VAR_INPUT
			pr 	: ^_RESULT;			//! <Variable Comment="pointer to _RESULT information" Name="GetData.pr"/>
			pio 	: ^_IO;			//! <Variable Comment="pointer to _IO information" Name="GetData.pio"/>
			pv 	: ^_VARIABLE;			//! <Variable Comment="pointer to _VARIABLE information given by LSE" Name="GetData.pv"/>
			input 	: BOOL;			//! <Variable Comment="TRUE it&apos;s an input&#13;&#10;FALSE it&apos;s an output" Name="GetData.input"/>
		END_VAR
		VAR_OUTPUT
			retcode (EAX) 	: _DOIT;			//! <Variable Comment="for the returnstatement there are 3 different possibilities&#13;&#10;  _IDLE ..... the system should goon like it is (system goes on)&#13;&#10;  _IDIDIT ... i did it (system is ready)&#13;&#10;  _IFAILED .. i tried to do my best, but i failed (system is ready)" Name="GetData.retcode"/>
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB _LimitMax::@CT_
0$UINT,
2#0100000000000000$UINT, //TY__LIMITMAX
0$UINT, 2$UINT, (SIZEOF(::_LimitMax))$UINT, 
0$UINT, 0$UINT, 0$UINT, 
TO_UDINT(2996404079), "_LimitMax", //Class
TO_UDINT(2980745877), "_MyIO", 0$UINT, 3$UINT, //Baseclass
//Servers:
//Clients:
END_FUNCTION


#define USER_CNT__LimitMax 17

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT__LimitMax] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION _LimitMax::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= _MyIO::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= _MyIO::Server0.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, _MyIO::Server0.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT__LimitMax;
#pragma warning (disable : 74)
	vmt.UserFcts[3]		:= #Draw();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[4]		:= #GetData();

#pragma warning (default : 74)
	_MyIO::Server0.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF _MyIO::Server0.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
#pragma using _Lse


//*********************Inserted from .\_LimitMax\_LimitMax_00_00.st*********************



 


#pragma warning (disable: 73)
//[#ENGLISH]
//this method is called everytime when system wants to get data for defined io.
//
//pr ........ pointer to result information
//pio ....... pointer to io information
//pv ........ pointer to io variableinformation
//input ..... _TRUE it's an input / _FALSE it's an output
//
//for the returnstatement there are 3 different possibilities
//_IDLE ..... the system should goon like it is (system goes on)
//_IDIDIT ... i did it (system is ready)
//_IFAILED .. i tried to do my best, but i failed (system is ready)
//
//if you want to do it let's return _IDIDIT and initialize the  structure _RESULT

FUNCTION __CDECL VIRTUAL GLOBAL _LimitMax::GetData
VAR_INPUT
	pr		: ^_RESULT;
	pio		: ^_IO;
	pv		: ^_VARIABLE;
	input		: BOOL;
END_VAR
VAR_OUTPUT
	retcode		: _DOIT;
END_VAR

  pr^.value := pr^.rmax; 
  retcode   := _IDLE; 

END_FUNCTION //__CDECL VIRTUAL GLOBAL _LimitMax::GetData



FUNCTION __CDECL VIRTUAL GLOBAL _LimitMax::Draw
	VAR_INPUT
		pio 	: ^_IO;
		pr 	: ^_RESULT;
		pv 	: ^_VARIABLE;
		input 	: BOOL;
	END_VAR
	VAR_OUTPUT
		retcode (EAX) 	: _DOIT;
	END_VAR
  VAR
  	txt : array[0..39] of _CHAR;
    tim : _TIME;
    dat : _DATE;
    format : uint;
  END_VAR


  retcode := _IDLE;
  
  if(pv^.info.vartype = FTIME) then
    tim.hour := 23;
    tim.minute := 59;
    tim.second := 59;
    format_time(#txt[0], #tim, pv^.info.format);
    OutMultiTextAlign(#txt[0], 0, #pio^.space, pio^.font, pio^.attrib, pio^.frametype, pio^.coltxt, pio^.colback, pio^.colframe, sizeof(_CHAR));
    retcode := _IDIDIT;
  elsif(pv^.info.vartype = FDATE) then
    
    // -- HubChr v0.2 Maximum Date depends on platform!
    if _rtosversion >= OS_STARTVERSION_SALAMANDER then    
      dat.year := MAXDATE_SALAMANDER_YEAR;
      dat.month := MAXDATE_SALAMANDER_MONTH;
      dat.day := MAXDATE_SALAMANDER_DAY;
    else
      dat.year := MAXDATE_RTOS_YEAR;
      dat.month := MAXDATE_RTOS_MONTH;
      dat.day := MAXDATE_RTOS_DAY;
    end_if;
    // -- End HubChr v0.2
    
    format := pv^.info.format;
    case format of
      SIZE_DDMMYY : dat.year := 2089;
      SIZE_WWDDMM : format := SIZE_DDMM;
      SIZE_WWDDMMYYYY : format := SIZE_DDMMYYYY;
    end_case;
    
    format_date(#txt[0], #dat, format);
    OutMultiTextAlign(#txt[0], 0, #pio^.space, pio^.font, pio^.attrib, pio^.frametype, pio^.coltxt, pio^.colback, pio^.colframe, sizeof(_CHAR));
    retcode := _IDIDIT;
  end_if;


END_FUNCTION
