//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "_Radio32Ram"
	Revision           = "0.1"
	GUID               = "{7FE9532A-3A84-11D6-8BC6-0048545E8899}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)"
	Comment            = "enables bitwise acces to 4 remanent Bytes, just one bit can be set to 1 all others are 0">
	<Channels>
		<Server Name="Data" GUID="{7FE9532C-3A84-11D6-8BC6-0048545E8899}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Client Name="RamData" Required="true" Internal="true"/>
	</Channels>
	<RevDoku>
		<Owner Company="sigmatek" Author="kolott"/>
		<Dokumentation Revision="0.1" Date="2011-09-28" Author="kolott" Company="sigmatek" Description="betterment datatypeconversion"/>
	</RevDoku>
	<Network Name="_Radio32Ram">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "RamData"
				GUID       = "{7FE9532F-3A84-11D6-8BC6-0048545E8899}"
				Class      = "Ram"
				Position   = "(0,0)"
				Visualized = "false">
				<Channels>
					<Server Name="Data"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.RamData" Destination="RamData.Data"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
_Radio32Ram : CLASS
  //Servers:
	Data 	: SvrChCmd_BDINT;
  //Clients:
	RamData 	: CltChCmd_Ram;
  //Variables:
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Data::Read
		VAR_OUTPUT
			output (EAX) 	: BDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Data::Write
		VAR_INPUT
			input (EAX) 	: BDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: BDINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using Ram


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB _Radio32Ram::@CT_
0$UINT,
2#0100000000000000$UINT, //TY__RADIO32RAM
0$UINT, 1$UINT, (SIZEOF(::_Radio32Ram))$UINT, 
1$UINT, 1$UINT, 0$UINT, 
TO_UDINT(1142413040), "_Radio32Ram", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::_Radio32Ram.Data.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(2607161047), "Data", 
//Clients:
(::_Radio32Ram.RamData.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(4150502170), "RamData", TO_UDINT(1903583397), "Ram", 1$UINT, 3$UINT, 
END_FUNCTION


#define USER_CNT__Radio32Ram 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT__Radio32Ram] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION _Radio32Ram::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT__Radio32Ram, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Read		:= #Read();
	vmt.CmdTable.Write		:= #Write();
	Data.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF Data.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


//*********************Inserted from .\_Radio32Ram\_Radio32Ram_00_00.st*********************



 



FUNCTION VIRTUAL GLOBAL _Radio32Ram::Data::Read
	VAR_OUTPUT
		output (EAX) 	: BDINT;
	END_VAR

  output$dint := RamData.Data.Read(); 

END_FUNCTION //VIRTUAL GLOBAL _Radio32Ram::Data::Read

FUNCTION VIRTUAL GLOBAL _Radio32Ram::Data::Write
	VAR_INPUT
		input (EAX) 	: BDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: BDINT;
	END_VAR
VAR
    mydat : UDINT; 
	para  : UDINT; 
END_VAR 

  mydat$DINT := RamData.Data.Read(); 
  para       := input$UDINT; 

  if(para and 16#80000000) then
    if(para = 16#80000000) then
	  mydat := 16#80000000; 
	else   
      mydat := para and 16#7FFFFFFF;  
    end_if; 
  else
    if(para = 0) then
      mydat := mydat and 16#7FFFFFFF; 
    else
	  mydat := mydat and (16#FFFFFFFF xor para); 
	end_if; 
  end_if; 

  result:= mydat;
  Data  := mydat;
  RamData.Data.Write(result$dint);  
  

END_FUNCTION //VIRTUAL GLOBAL _Radio32Ram::Data::Write

