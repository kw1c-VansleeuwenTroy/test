//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION
#include "..\..\Source\Common\hmi_nuc.h"

(*!
<Class
	Name               = "HmiProjectList"
	Revision           = "0.2"
	GUID               = "{99A63BC7-C6AF-48E6-AAC7-F373367D1454}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)">
	<Channels>
		<Server Name="ClassSvr" GUID="{DD9CD17F-09BD-4721-A4F3-1B1B27BFBA24}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Client Name="File" Required="true" Internal="false"/>
		<Client Name="StringLib" Required="true" Internal="false"/>
	</Channels>
	<Dependencies>
		<Files>
			<File Path=".\Source\Common\hmi_nuc.h" Include="true"/>
		</Files>
	</Dependencies>
	<RevDoku>
		<Owner Company="sigmatek" Author="kolott"/>
		<Dokumentation Revision="0.2" Date="2020-04-28" Author="kolott" Company="sigmatek" Description="New method GetLseProjectName() added"/>
		<Dokumentation Revision="0.1" Date="2016-09-06" Author="kolott" Company="sigmatek" Description="sa35391: new method GetLseProjectRevision() added"/>
	</RevDoku>
</Class>
*)
HmiProjectList : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
  //Clients:
	File 	: CltChCmd_HmiFile;
	StringLib 	: CltChCmd_HmiStrLib;
  //Variables:
		No 	: UDINT;
		Ptr 	: ^HMI_PRJINFO;
		StartScreen 	: UDINT;
		LseProjectRevision 	: HDINT;
		LseProjectName : ARRAY [0..64] OF UINT;

  //Functions:
	
	FUNCTION Load
		VAR_INPUT
			pstartScreen 	: ^UDINT;
			prevision 	: ^HDINT;
		END_VAR
		VAR_OUTPUT
			retcode 	: BOOL;
		END_VAR;
	
	FUNCTION Free;
	
	FUNCTION GLOBAL LoadFile
		VAR_INPUT
			dpne 	: ^CHAR;
		END_VAR
		VAR_OUTPUT
			retcode 	: UDINT;
		END_VAR;
	
	FUNCTION GLOBAL GetNo
		VAR_OUTPUT
			retcode 	: UDINT;
		END_VAR;
	
	FUNCTION GLOBAL Get
		VAR_INPUT
			index 	: UDINT;
		END_VAR
		VAR_OUTPUT
			retcode 	: ^HMI_PRJINFO;
		END_VAR;
	
	FUNCTION GLOBAL GetStartScreen
		VAR_OUTPUT
			retcode 	: UDINT;
		END_VAR;
	
	FUNCTION OnlineLoad;
	
	FUNCTION GLOBAL GetLseProjectRevision
		VAR_OUTPUT
			retcode 	: HDINT;
		END_VAR;
	
	FUNCTION GLOBAL GetLseProjectName
		VAR_INPUT
			pdst 	: ^UINT;
			bytesize_dst 	: UDINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd HmiFile
#pragma usingLtd HmiStrLib


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB HmiProjectList::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_HMIPROJECTLIST
0$UINT, 2$UINT, (SIZEOF(::HmiProjectList))$UINT, 
1$UINT, 2$UINT, 0$UINT, 
TO_UDINT(2305619121), "HmiProjectList", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::HmiProjectList.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
//Clients:
(::HmiProjectList.File.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3121273764), "File", TO_UDINT(2548286290), "HmiFile", 0$UINT, 4$UINT, 
(::HmiProjectList.StringLib.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3243119075), "StringLib", TO_UDINT(103556616), "HmiStrLib", 0$UINT, 2$UINT, 
END_FUNCTION


#define USER_CNT_HmiProjectList 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_HmiProjectList] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION HmiProjectList::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR

	ret_code := C_OK;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION HmiProjectList::OnlineLoad
  VAR
  	anz : udint;
    tmp : array[0..12] of usint;
  END_VAR

  if(File.FRead(#anz, 4) = true) then
    while(anz > 0) do
      // [1][1][4][4][1] = 11 bytes
      File.FRead(#tmp[0], 11); // dump info
      anz -= 1;
    end_while;
  end_if;

END_FUNCTION

FUNCTION HmiProjectList::Load
	VAR_INPUT
		pstartScreen 	: ^UDINT;
		prevision 	: ^HDINT;
	END_VAR
	VAR_OUTPUT
		retcode 	: BOOL;
	END_VAR
  var
    anz : udint; 
    tmp : ^HMI_PRJINFO; 
  end_var; 
  
  retcode := false;
  
  Free();
  if(File.FRead(#anz$void, 4) = true) then
    if(File.FMemory(#Ptr$^void, anz * sizeof(HMI_PRJINFO)) = true) then
      File.FRead(pstartscreen, 4);
    
      tmp := Ptr; 
      while(anz) do
        init_HMI_PRJINFO(tmp);
        
        File.Read_HMI_ANYTHING(#tmp^.ima);
        File.FRead(#tmp^.access$void, 1);
        File.Read_HMI_CHKBIT(#tmp^.chkbit);
        File.FRead(#tmp^.name[0]$void, 13);
        
        anz -= 1;
        No  += 1;
        tmp += sizeof(HMI_PRJINFO);
      end_while;
      
      OnlineLoad(); // online info
      File.FRead(prevision, 4); // load lse-project-revisionnumber
      
      // ProjectnameInfo: [2] ... Anzahl Bytes
      //                  [ ..... UnicodeName, Vorsicht: kein Final-Zero
      _memset(#LseProjectName[0], 0, sizeof(LseProjectName));
      anz := 0;
      if(File.FRead(#anz, 2) = true) then
        if(anz <= (sizeof(LseProjectName)-2)) then
          File.FRead(#LseProjectName[0], anz);
        end_if;
      end_if;
      
      if(File.FChkFile() = true) then 
        retcode := true; 
      else
        Free(); 
      end_if; 
    end_if; 
  end_if; 

  ClassSvr := to_dint(No); 

END_FUNCTION

FUNCTION HmiProjectList::Free
  var
    tmp : ^HMI_PRJINFO; 
  end_var

  if(Ptr <> NIL) then
    tmp := Ptr; 
    while(No) do
      free_HMI_PRJINFO(tmp); 
      No -= 1; 
      tmp += sizeof(HMI_PRJINFO); 
    end_while;
    StringLib.XMemory(#Ptr$^void, 0); 
  end_if;
  
  Ptr                := NIL; 
  No                 := 0; 
  StartScreen        := 0;
  LseProjectRevision := 0;
  LseProjectName[0]  := 0;

END_FUNCTION

FUNCTION GLOBAL HmiProjectList::LoadFile
  VAR_INPUT
    dpne : ^char;
  END_VAR
	VAR_OUTPUT
		retcode 	: UDINT;
	END_VAR    
  var
    fst : uint;
  end_var

  retcode := 0;

  if(File.FOpen(dpne, 'R') = true) then
    File.FReadHeader();
    
    fst := File.DoWrongCompilerVersion();
    if(fst <> 0) then
      if(fst = 2) then
        retcode := 2; // Wrong LSE-CompilerVersion
      else
        if(Load(#StartScreen, #LseProjectRevision) = true) then
          retcode := 1;
        end_if;
      end_if;
    end_if;
    
    File.FClose();
  end_if;

END_FUNCTION

FUNCTION GLOBAL HmiProjectList::GetNo
	VAR_OUTPUT
		retcode 	: UDINT;
	END_VAR    

  retcode := No;

END_FUNCTION

FUNCTION GLOBAL HmiProjectList::Get
	VAR_INPUT
		index : UDINT;
	END_VAR    
	VAR_OUTPUT
		retcode 	: ^HMI_PRJINFO;
	END_VAR    

  retcode := NIL;
  if(index < No) then
    retcode := Ptr + (index * sizeof(HMI_PRJINFO));
  end_if;

END_FUNCTION


FUNCTION GLOBAL HmiProjectList::GetStartScreen
	VAR_OUTPUT
		retcode 	: UDINT;
	END_VAR

  retcode := StartScreen;

END_FUNCTION

FUNCTION GLOBAL HmiProjectList::GetLseProjectRevision
	VAR_OUTPUT
		retcode 	: HDINT;
	END_VAR

  retcode := LseProjectRevision;

END_FUNCTION

FUNCTION GLOBAL HmiProjectList::GetLseProjectName
	VAR_INPUT
		pdst 	: ^UINT;
		bytesize_dst 	: UDINT;
	END_VAR
  VAR
  	len : udint;
    ps : ^uint;
  END_VAR

  len := bytesize_dst / 2;
  if((pdst <> nil) & (len > 0)) then
    ps  := #LseProjectName[0];
    len -= 1; // final 0
    
    while((len > 0) & (ps^ <> 0)) do
      pdst^ := ps^;
      pdst  += 2;
      ps    += 2;
      len   -= 1;
    end_while;
    pdst^ := 0;
  end_if;
  
END_FUNCTION
