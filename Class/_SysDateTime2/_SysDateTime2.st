//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "_SysDateTime2"
	Revision           = "0.0"
	GUID               = "{3B80B0B3-C122-4F2F-81D4-52609BFF1698}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "true"
	DefBackground      = "100 ms"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)">
	<Channels>
		<Server Name="Day" GUID="{3679B7AF-A564-4A19-8E34-9B5D8D580B9E}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Hour" GUID="{59DA0FC5-D2AB-49B1-8FD4-3D893998C683}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Minute" GUID="{E7E44FB5-D5E0-4836-BD13-FA5036880491}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Month" GUID="{EF35EF43-2C73-4C2A-BE61-4FCA6586694F}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Second" GUID="{BEF552FE-4FF1-4A6E-9F60-DA371AD0EE70}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Year" GUID="{6C343462-8A3F-40DE-B9C4-269FBA95F3FD}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Year2Digit" GUID="{9DA7EB26-5692-460C-AE6B-421E58C85521}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
	</Channels>
	<Network Name="_SysDateTime2">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name           = "_base"
				GUID           = "{792886C3-9329-4B74-A766-3A7890DA271F}"
				Class          = "_SysDateTime"
				Position       = "(218,120)"
				Visualized     = "false"
				BackgroundTime = "100 ms">
				<Channels>
					<Server Name="DayOfWeek"/>
					<Server Name="SysDate"/>
					<Server Name="SysTime"/>
					<Client Name="DoSummerTime" Value="0"/>
					<Client Name="System"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.SysDate" Destination="_base.SysDate" Vertices="(690,210),(518,210),"/>
			<Connection Source="this.SysTime" Destination="_base.SysTime" Vertices="(690,270),(518,270),"/>
			<Connection Source="this.DayOfWeek" Destination="_base.DayOfWeek" Vertices="(690,330),(518,330),"/>
			<Connection Source="_base.System" Destination="this.System" Vertices="(218,210),(38,210),"/>
			<Connection Source="_base.DoSummerTime" Destination="this.DoSummerTime" Vertices="(218,270),(38,270),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using _SysDateTime

_SysDateTime2 : CLASS
: _SysDateTime
  //Servers:
	Second 	: SvrCh_DINT;
	Minute 	: SvrCh_DINT;
	Hour 	: SvrCh_DINT;
	Day 	: SvrCh_DINT;
	Month 	: SvrCh_DINT;
	Year 	: SvrCh_DINT;
	Year2Digit 	: SvrCh_DINT;
  //Clients:
  //Variables:
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Background
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Second::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Minute::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Hour::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Day::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Month::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Year::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Year2Digit::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB _SysDateTime2::@CT_
0$UINT,
2#0100000000000000$UINT, //TY__SYSDATETIME2
0$UINT, 0$UINT, (SIZEOF(::_SysDateTime2))$UINT, 
7$UINT, 0$UINT, 0$UINT, 
TO_UDINT(3286875708), "_SysDateTime2", //Class
TO_UDINT(3931827689), "_SysDateTime", 0$UINT, 10$UINT, //Baseclass
//Servers:
(::_SysDateTime2.Second.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1189598959), "Second", 
(::_SysDateTime2.Minute.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2654628915), "Minute", 
(::_SysDateTime2.Hour.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1183579386), "Hour", 
(::_SysDateTime2.Day.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1929866010), "Day", 
(::_SysDateTime2.Month.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2044908214), "Month", 
(::_SysDateTime2.Year.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2367135363), "Year", 
(::_SysDateTime2.Year2Digit.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1497762861), "Year2Digit", 
//Clients:
END_FUNCTION


#define USER_CNT__SysDateTime2 2

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT__SysDateTime2] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION _SysDateTime2::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= _SysDateTime::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= _SysDateTime::SysDate.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, _SysDateTime::SysDate.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT__SysDateTime2;
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #Background();

#pragma warning (default : 74)
	_SysDateTime::SysDate.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF _SysDateTime::SysDate.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Second.pMeth			:= StoreMethod( #M_RD_DIRECT(), #Second::Write() );
	IF Second.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Minute.pMeth			:= StoreMethod( #M_RD_DIRECT(), #Minute::Write() );
	IF Minute.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Hour.pMeth			:= StoreMethod( #M_RD_DIRECT(), #Hour::Write() );
	IF Hour.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Day.pMeth			:= StoreMethod( #M_RD_DIRECT(), #Day::Write() );
	IF Day.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Month.pMeth			:= StoreMethod( #M_RD_DIRECT(), #Month::Write() );
	IF Month.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Year.pMeth			:= StoreMethod( #M_RD_DIRECT(), #Year::Write() );
	IF Year.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Year2Digit.pMeth			:= StoreMethod( #M_RD_DIRECT(), #Year2Digit::Write() );
	IF Year2Digit.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL _SysDateTime2::Second::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

  result := ACCESS_DENIED;
  if(SetTimePart(2, to_uint(input)) = true) then
	  Second := input;
 	  result := Second;
  end_if;
  
END_FUNCTION


FUNCTION VIRTUAL GLOBAL _SysDateTime2::Minute::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

  result := ACCESS_DENIED;
  if(SetTimePart(1, to_uint(input)) = true) then
	  Minute := input;
 	  result := Minute;
  end_if;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _SysDateTime2::Hour::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

  result := ACCESS_DENIED;
  if(SetTimePart(0, to_uint(input)) = true) then
	  Hour := input;
 	  result := Hour;
  end_if;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _SysDateTime2::Day::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

  result := ACCESS_DENIED;
  if(SetDatePart(2, to_uint(input)) = true) then
    Day := input;
    result := Day;
  end_if;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _SysDateTime2::Month::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

  result := ACCESS_DENIED;
  if(SetDatePart(1, to_uint(input)) = true) then
	  Month := input;
 	  result := Month;
  end_if;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _SysDateTime2::Year::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR
    
  result := ACCESS_DENIED;
  if(SetDatePart(0, to_uint(input)) = true) then
	  Year := input;
 	  result := Year;
  end_if;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _SysDateTime2::Year2Digit::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR
  var
    yy : dint;
  end_var

  if(input < 90) then
    yy := 2000 + input;
  else
    yy := 1900 + input;
  end_if;

  result := Year.Write(yy);

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _SysDateTime2::Background
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR

  state := _SysDateTime::Background(eax);
  
   // HHHHHHHHNNNNNNNNSSSSSSSSxxxxxxxx
  Second := to_dint((SysTime shr  8) and 16#00FF);
  Minute := to_dint((SysTime shr 16) and 16#00FF);
  Hour   := to_dint((SysTime shr 24) and 16#00FF);

  // YYYYYYYYYYYYYYYYMMMMDDDDDDDDWWWW
  Day   := to_dint((SysDate shr  4) and 16#00FF);
  Month := to_dint((SysDate shr 12) and 16#000F);
  Year  := to_dint((SysDate shr 16) and 16#FFFF);
  
  if(Year >= 2000) then
    Year2Digit := Year - 2000;
  else
    Year2Digit := Year - 1900;
  end_if;

END_FUNCTION




