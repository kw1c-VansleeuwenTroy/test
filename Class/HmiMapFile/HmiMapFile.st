//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "HmiMapFile"
	Revision           = "0.0"
	GUID               = "{E88689F0-C39A-44E7-8089-C08D894FA243}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)">
	<Channels>
		<Server Name="ClassSvr" GUID="{894FE0BC-E5E2-401B-A030-1AECF130C38F}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Client Name="File" Required="true" Internal="false"/>
		<Client Name="StateBit" Required="true" Internal="false"/>
		<Client Name="StringLib" Required="true" Internal="false"/>
		<Client Name="VarList" Required="true" Internal="false"/>
	</Channels>
</Class>
*)
HmiMapFile : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
  //Clients:
	File 	: CltChCmd_HmiFile;
	VarList 	: CltChCmd_HmiVarList;
	StateBit 	: CltChCmd_HmiStateBit35;
	StringLib 	: CltChCmd_HmiStrLib;
  //Variables:
		Tabs 	: DINT;
  //Functions:
	
	FUNCTION GLOBAL Create
		VAR_INPUT
			dp 	: ^CHAR;
			prjcrc 	: UDINT;
		END_VAR;
	
	FUNCTION GLOBAL TagLine
		VAR_INPUT
			ptxt 	: ^CHAR;
		END_VAR;
	
	FUNCTION GLOBAL TagNote
		VAR_INPUT
			ptag 	: ^CHAR;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd HmiFile
#pragma usingLtd HmiStateBit35
#pragma usingLtd HmiStrLib
#pragma usingLtd HmiVarList


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB HmiMapFile::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_HMIMAPFILE
0$UINT, 0$UINT, (SIZEOF(::HmiMapFile))$UINT, 
1$UINT, 4$UINT, 0$UINT, 
TO_UDINT(896341175), "HmiMapFile", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::HmiMapFile.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
//Clients:
(::HmiMapFile.File.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3121273764), "File", TO_UDINT(2548286290), "HmiFile", 0$UINT, 4$UINT, 
(::HmiMapFile.VarList.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(145198113), "VarList", TO_UDINT(3793961451), "HmiVarList", 0$UINT, 17$UINT, 
(::HmiMapFile.StateBit.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(4075800106), "StateBit", TO_UDINT(4141094888), "HmiStateBit35", 0$UINT, 5$UINT, 
(::HmiMapFile.StringLib.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3243119075), "StringLib", TO_UDINT(103556616), "HmiStrLib", 0$UINT, 2$UINT, 
END_FUNCTION


#define USER_CNT_HmiMapFile 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_HmiMapFile] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION HmiMapFile::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR

	ret_code := C_OK;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION GLOBAL HmiMapFile::TagLine
	VAR_INPUT
		ptxt 	: ^CHAR;
	END_VAR
  VAR
    tmp : array[0..10] of char;
  	dat : udint;
  END_VAR

  if(Tabs > 0) then
    _memset(#tmp[0], 9, sizeof(tmp));
    File.FWrite(#tmp[0], to_udint(Tabs));
  end_if;
  
  File.FWrite(ptxt, StringLib.StrLen(ptxt, 1));
  dat := 16#0A0D;
  File.FWrite(#dat, 2);
  
END_FUNCTION

FUNCTION GLOBAL HmiMapFile::TagNote
	VAR_INPUT
		ptag 	: ^char;
	END_VAR
  VAR
  	ph : ^char;
  END_VAR

  ph := ptag + 1;

  if(ph^ = '/') then
    Tabs -= 1;
  end_if;
  
  TagLine(ptag);
  
  if(ph^ <> '/') then
    Tabs += 1;
  end_if;

END_FUNCTION

FUNCTION GLOBAL HmiMapFile::Create
	VAR_INPUT
		dp 	: ^CHAR;
		prjcrc 	: UDINT;
	END_VAR
  VAR
    label : array[0..256] of char;
    idx : udint;
  END_VAR

(*
  crlf := 16#0A0D;
  
  StringLib.StrCpy(#label[0], 1, dp, 1);
  StringLib.StrCat(#label[0], 1, "EasyMap.txt", 1);

  File.FOpen(#label[0], 'W');

  StringLib.StrCpy(#label[0], 1, "[VER] := 2.0", 1);
  File.FWrite(#label[0], StringLib.StrLen(#label[0], 1));
  File.FWrite(#crlf, 2);
  
  StringLib.StrCpy(#label[0], 1, "[CRC] := 16#", 1);
  StringLib.HexToStr(#label[StringLib.StrLen(#label[0], 1)], prjcrc);
  File.FWrite(#label[0], StringLib.StrLen(#label[0], 1));
  File.FWrite(#crlf, 2);
  File.FWrite(#crlf, 2);

  idx := 0;
  while(VarList.GetMapInfo(idx, #label[0]) <> nil) do
    File.FWrite(#label[0], StringLib.StrLen(#label[0], 1));
    File.FWrite(#crlf, 2);
    idx += 1;
  end_while;
  File.FClose();
*)
  Tabs := 0;

  StringLib.StrCpy(#label[0], 1, dp, 1);
  StringLib.StrCat(#label[0], 1, "EasyMap.xml", 1);

  File.FOpen(#label[0], 'W');

  StringLib.StrCpy(#label[0], 1, "<?xml version=_1.0_ encoding=_ISO-8859-1_?>", 1);
  StringLib.StrXchg(#label[0], '_', '"');
  TagLine(#label[0]);

  TagNote("<mapinfo>");
    TagNote("<header>");  
      StringLib.StrCpy(#label[0], 1, "<version value=_2.0_/>", 1);
      StringLib.StrXchg(#label[0], '_', '"');
      TagLine(#label[0]);
  
      StringLib.StrCpy(#label[0], 1, "<crc value=_0x", 1);
      StringLib.HexToStr(#label[StringLib.StrLen(#label[0], 1)], prjcrc);
      StringLib.StrCat(#label[0], 1, "_/>", 1);
      StringLib.StrXchg(#label[0], '_', '"');
      TagLine(#label[0]);
    TagNote("</header>");

    TagNote("<info>");
      idx := 0;
      while(VarList.GetMapInfoXML(idx, #label[0]) <> nil) do
        TagLine(#label[0]);
        idx += 1;
      end_while;
    
      idx := 0;
      while(StateBit.GetMapInfoXML(idx, #label[0]) <> nil) do
        TagLine(#label[0]);
        idx += 1;
      end_while;
    TagNote("</info>");
  TagNote("</mapinfo>");
  
  File.FClose();
  
END_FUNCTION

