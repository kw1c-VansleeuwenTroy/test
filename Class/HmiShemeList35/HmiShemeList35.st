//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION
#include "..\..\Source\Common\hmi_nuc.h"

(*!
<Class
	Name               = "HmiShemeList35"
	Revision           = "0.4"
	GUID               = "{511D3E2F-AFE7-475C-87F9-C3A585E7EA71}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)">
	<Channels>
		<Server Name="ByteSize" GUID="{79124640-F74C-424F-B747-91116695C739}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="ClassSvr" GUID="{6578DACE-FDDB-413B-9C67-94A5263C66D1}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
	</Channels>
	<Dependencies>
		<Files>
			<File Path=".\Source\Common\hmi_nuc.h" Include="true"/>
		</Files>
	</Dependencies>
	<RevDoku>
		<Owner Company="sigmatek" Author="kolott"/>
		<Dokumentation Revision="0.4" Date="2018-08-31" Author="kolott" Company="sigmatek" Description="cTor added"/>
		<Dokumentation Revision="0.3" Date="2016-06-28" Author="kolott" Company="sigmatek" Description="Type of membervariable PHmiCreator changen foom ^void to ^LseEasy."/>
		<Dokumentation Revision="0.2" Date="2014-08-06" Author="kolott" Company="sigmatek" Description="betterment in memoryrequirement"/>
		<Dokumentation Revision="0.1" Date="2014-03-28" Author="kolott" Company="sigmatek" Description="server ByteSize added"/>
	</RevDoku>
</Class>
*)
HmiShemeList35 : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	ByteSize 	: SvrCh_UDINT;
  //Clients:
  //Variables:
		xData : ARRAY [0..20000] OF USINT;

		PHmiCreator 	: ^LseEasy;
  //Functions:
	
	FUNCTION HmiShemeList35
		VAR_OUTPUT
			ret_code 	: ConfStates;
		END_VAR;
	
	FUNCTION AddLine
		VAR_INPUT
			psb 	: ^_BOX_SHEMEBLOCK;
			pln 	: ^HMI_SCHEMELINE;
		END_VAR;
	
	FUNCTION GLOBAL Free;
	
	FUNCTION GLOBAL Start
		VAR_INPUT
			pcreator 	: ^LseEasy;
		END_VAR;
	
	FUNCTION GLOBAL End
		VAR_OUTPUT
			retcode 	: ^void;
		END_VAR;
	
	FUNCTION GLOBAL AddEntry
		VAR_INPUT
			psc 	: ^HMI_SCHEME;
		END_VAR
		VAR_OUTPUT
			retcode 	: UINT;
		END_VAR;
	
	FUNCTION GLOBAL GetNo
		VAR_OUTPUT
			retcode 	: UDINT;
		END_VAR;
	
	FUNCTION DefaultInit
		VAR_INPUT
			pcreator 	: ^LseEasy;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB HmiShemeList35::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_HMISHEMELIST35
0$UINT, 4$UINT, (SIZEOF(::HmiShemeList35))$UINT, 
2$UINT, 0$UINT, 0$UINT, 
TO_UDINT(2500045939), "HmiShemeList35", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::HmiShemeList35.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::HmiShemeList35.ByteSize.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1607089543), "ByteSize", 
//Clients:
END_FUNCTION


#define USER_CNT_HmiShemeList35 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_HmiShemeList35] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION HmiShemeList35::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_HmiShemeList35, pCmd := #vmt.CmdTable);
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ret_code	:= HmiShemeList35();

END_FUNCTION

#pragma usingLtd LseEasy

//{{LSL_IMPLEMENTATION

#includeC "..\LseEasy\Create.h"

#pragma using LseEasy

FUNCTION HmiShemeList35::HmiShemeList35
	VAR_OUTPUT
		ret_code 	: ConfStates;
	END_VAR

	ret_code := C_OK;
  ClassSvr := 0;
  ByteSize := 0;
  DefaultInit(NIL);

END_FUNCTION

FUNCTION HmiShemeList35::DefaultInit
	VAR_INPUT
		pcreator 	: ^LseEasy;
	END_VAR
  var
    pbox : ^_BOX_SHEMELIST;
  end_var

  PHmiCreator := pcreator;

  pbox$^usint := #xData[0];
  pbox^.no := 0;
  pbox^.boxhdr.crc32 := 0;
  pbox^.boxhdr.size  := 0;
  
END_FUNCTION

FUNCTION GLOBAL HmiShemeList35::Free

  DefaultInit(PHmiCreator);

END_FUNCTION

FUNCTION GLOBAL HmiShemeList35::Start
	VAR_INPUT
		pcreator 	: ^LseEasy;
	END_VAR
  
  Free();
  ClassSvr    := 0;
  ByteSize    := 0;
  PHmiCreator := pcreator;
  
END_FUNCTION

FUNCTION GLOBAL HmiShemeList35::End
	VAR_OUTPUT
		retcode 	: ^void;
	END_VAR
  var
    pbox : ^_BOX_SHEMELIST;
  end_var

  pbox$^usint := #xData[0];
  ClassSvr    := pbox^.no;
  end_BIGBOX_HEADER(#pbox^.boxhdr, sizeof(_BIGBOX_HEADER) + sizeof(pbox^.no));
  ByteSize    := pbox^.boxhdr.size;
  retcode     := pbox;
  
END_FUNCTION

FUNCTION HmiShemeList35::AddLine
	VAR_INPUT
		psb 	: ^_BOX_SHEMEBLOCK;
		pln 	: ^HMI_SCHEMELINE;
	END_VAR
  VAR
  	pdst : ^_BOX_SHEMELINE;
  END_VAR

  pdst := #psb^.data[0]; // decieve boundexceed
  pdst += psb^.no * sizeof(_BOX_SHEMELINE);
  
  case(pln^.operator) of
    SCHEMEOP_SMALLER     : pdst^.cmd := mSHMOP_SMALLER;
    SCHEMEOP_SMALLEQUAL  : pdst^.cmd := mSHMOP_SMALLEQUAL;
    SCHEMEOP_EQUAL       : pdst^.cmd := mSHMOP_EQUAL;
    SCHEMEOP_BIGGEREQUAL : pdst^.cmd := mSHMOP_BIGGEREQUAL;
    SCHEMEOP_BIGGER      : pdst^.cmd := mSHMOP_BIGGER;
    SCHEMEOP_NOTEQUAL    : pdst^.cmd := mSHMOP_NOTEQUAL;
    else return;
  end_case;
  
  psb^.no     += 1;
  pdst^.value := pln^.op2;
  pdst^.index := 0xFFFF;
  if(PHmiCreator <> NIL) then
    pdst^.index := PHmiCreator^.AddAnything(#pln^.any);
  end_if;

END_FUNCTION

FUNCTION GLOBAL HmiShemeList35::AddEntry
	VAR_INPUT
		psc 	: ^HMI_SCHEME;
	END_VAR
	VAR_OUTPUT
		retcode 	: UINT;
	END_VAR
  VAR
  	pln : ^HMI_SCHEMELINE;
    no, size : udint;
    pbox : ^_BOX_SHEMELIST;
    pdst : ^_BOX_SHEMEBLOCK;
  END_VAR
  
  retcode := 16#FFFF;
  
  if(psc <> NIL) then
    pbox$^usint := #xData[0];
  
    if(psc^.index35 < pbox^.no) then
      retcode := to_uint(psc^.index35); // sheme already added
      return;
    end_if;
    
    pdst     := #pbox^.data + pbox^.boxhdr.size;
    pdst^.no := 0;

    no  := psc^.no;
    pln := psc^.ptr;
    while(no) do
      no -= 1;
      AddLine(pdst, pln);
      pln += sizeof(HMI_SCHEMELINE);
    end_while;  
    
    if(pdst^.no > 0) then
      size := pdst^.no;
      pbox^.boxhdr.size += (size * sizeof(_BOX_SHEMELINE)) + sizeof(pdst^.no);
      retcode           := pbox^.no;
      psc^.index35      := retcode;
      pbox^.no          += 1;
    end_if;
  end_if;
  
END_FUNCTION

FUNCTION GLOBAL HmiShemeList35::GetNo
	VAR_OUTPUT
		retcode 	: UDINT;
	END_VAR
  VAR
    pbox : ^_BOX_SHEMELIST;
  END_VAR
  
  pbox$^usint := #xData[0];
  retcode := pbox^.no;

END_FUNCTION
