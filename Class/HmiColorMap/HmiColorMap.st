//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "HmiColorMap"
	Revision           = "0.0"
	GUID               = "{7059BEF6-3280-4D36-87C4-13363D7ECAA0}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)">
	<Channels>
	</Channels>
	<Network Name="HmiColorMap">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{0FD3910C-FC96-4189-A298-668B6B552F42}"
				Class      = "HmiBaseList"
				Position   = "(218,120)"
				Visualized = "false">
				<Channels>
					<Server Name="ClassSvr"/>
					<Client Name="File"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.ClassSvr" Destination="_base.ClassSvr" Vertices="(690,210),(518,210),"/>
			<Connection Source="_base.File" Destination="this.File" Vertices="(218,210),(38,210),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using HmiBaseList

HmiColorMap : CLASS
: HmiBaseList
  //Servers:
  //Clients:
  //Variables:
		Ptr : ARRAY [0..255] OF UINT;

		No 	: UDINT;
  //Functions:
	
	FUNCTION HmiColorMap
		VAR_OUTPUT
			ret_code 	: ConfStates;
		END_VAR;
	
	FUNCTION VIRTUAL Load
		VAR_OUTPUT
			retcode 	: BOOL;
		END_VAR;
	
	FUNCTION VIRTUAL Free;
	
	FUNCTION GLOBAL Get
		VAR_INPUT
			index 	: USINT;
		END_VAR
		VAR_OUTPUT
			retcode 	: UINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB HmiColorMap::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_HMICOLORMAP
0$UINT, 0$UINT, (SIZEOF(::HmiColorMap))$UINT, 
0$UINT, 0$UINT, 0$UINT, 
TO_UDINT(845038353), "HmiColorMap", //Class
TO_UDINT(3735923847), "HmiBaseList", 0$UINT, 0$UINT, //Baseclass
//Servers:
//Clients:
END_FUNCTION


#define USER_CNT_HmiColorMap 2

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_HmiColorMap] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION HmiColorMap::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= HmiBaseList::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= HmiBaseList::ClassSvr.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, HmiBaseList::ClassSvr.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_HmiColorMap;
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #Load();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[1]		:= #Free();

#pragma warning (default : 74)
	HmiBaseList::ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF HmiBaseList::ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ret_code	:= HmiColorMap();

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION HmiColorMap::HmiColorMap
	VAR_OUTPUT
		ret_code 	: ConfStates;
	END_VAR

	ret_code := C_OK;
  No := 0;

END_FUNCTION

FUNCTION MakeCol16 VAR_INPUT cr : UINT; cg : UINT; cb : UINT; END_VAR
	VAR_OUTPUT
		retcode 	: UINT;
	END_VAR

  if(cb = 254) then
    if((cr = 255) & (cg = 255)) then
      retcode := 0xFFFE;  // transparent
      return;
    end_if;
  end_if;

  cr      := (cr and 16#F8);
  cg      := (cg and 16#FC);
  cb      := (cb and 16#F8);
  retcode := (cr shl 8) or (cg shl 3) or (cb shr 3);

END_FUNCTION

FUNCTION VIRTUAL HmiColorMap::Free

  No := 0;

END_FUNCTION

FUNCTION VIRTUAL HmiColorMap::Load
	VAR_OUTPUT
		retcode 	: BOOL;
	END_VAR
  VAR
    rgb : array[0..2] of usint;
  	anz : udint;
    ph : ^uint;
  END_VAR

  retcode := false;
  File.Fread(#anz, 4);
  if(anz = 256) then
  
    ph := #Ptr[0];
    while(anz) do
      anz -= 1;
      File.FRead(#rgb[0], 3);
      ph^ := MakeCol16(rgb[0], rgb[1], rgb[2]);
      
      ph  += 2;
    end_while;
    
    retcode := File.FChkFile();
    No := 256;
  end_if;

  if(retcode = true) then
    ClassSvr := to_dint(No);
  end_if;
  
END_FUNCTION

FUNCTION GLOBAL HmiColorMap::Get
	VAR_INPUT
		index 	: USINT;
	END_VAR
	VAR_OUTPUT
		retcode 	: UINT;
	END_VAR

  retcode := 16#FFFF;
  if(index < No) then
    retcode := Ptr[index];
  end_if;

END_FUNCTION
