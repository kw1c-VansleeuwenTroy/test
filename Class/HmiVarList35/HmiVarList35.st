//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "HmiVarList35"
	Revision           = "0.5"
	GUID               = "{D765073F-1563-4654-B31E-A9B41D3CA1C2}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)">
	<Channels>
		<Server Name="ByteSize" GUID="{DAA37B42-F020-4B66-B286-8F0FAEE165CF}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="ClassSvr" GUID="{AE582A27-14D8-49EF-9557-839A41228D74}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
	</Channels>
	<RevDoku>
		<Owner Company="sigmatek" Author="kolott"/>
		<Dokumentation Revision="0.5" Date="2018-08-31" Author="kolott" Company="sigmatek" Description="cTor added"/>
		<Dokumentation Revision="0.4" Date="2017-11-28" Author="kolott" Company="sigmatek" Description="inc of ClassSvr during add of variables"/>
		<Dokumentation Revision="0.3" Date="2014-08-07" Author="kolott" Company="sigmatek" Description="server of type ENUM will work as well"/>
		<Dokumentation Revision="0.2" Date="2014-03-28" Author="kolott" Company="sigmatek" Description="server ByteSize added"/>
		<Dokumentation Revision="0.1" Date="2014-03-26" Author="kolott" Company="sigmatek" Description="innovation: ClassSvr will represent number of used servers in HMI"/>
	</RevDoku>
</Class>
*)
HmiVarList35 : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	ByteSize 	: SvrCh_UDINT;
  //Clients:
  //Variables:
		Ptr 	: ^void;
		xData : ARRAY [0..20000] OF USINT;

  //Functions:
	
	FUNCTION HmiVarList35
		VAR_OUTPUT
			ret_code 	: ConfStates;
		END_VAR;
	
	FUNCTION GLOBAL Free;
	
	FUNCTION GLOBAL Start;
	
	FUNCTION GLOBAL AddEntry
		VAR_INPUT
			og 	: DINT;
			ug 	: DINT;
			textdescribing 	: UINT;
			textunit 	: UINT;
		END_VAR
		VAR_OUTPUT
			retcode 	: UDINT;
		END_VAR;
	
	FUNCTION GLOBAL End
		VAR_OUTPUT
			retcode 	: ^void;
		END_VAR;
	
	FUNCTION DefaultInit;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB HmiVarList35::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_HMIVARLIST35
0$UINT, 5$UINT, (SIZEOF(::HmiVarList35))$UINT, 
2$UINT, 0$UINT, 0$UINT, 
TO_UDINT(1599081198), "HmiVarList35", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::HmiVarList35.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::HmiVarList35.ByteSize.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1607089543), "ByteSize", 
//Clients:
END_FUNCTION


#define USER_CNT_HmiVarList35 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_HmiVarList35] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION HmiVarList35::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_HmiVarList35, pCmd := #vmt.CmdTable);
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ret_code	:= HmiVarList35();

END_FUNCTION

//{{LSL_IMPLEMENTATION

#includeC "..\LseEasy\Create.h"

#define MAXVARNUMBER35  ((sizeof(xData) - sizeof(_BOX_VARLIST)) / sizeof(_BOX_VARLIST_ENTRY)) //1024

FUNCTION HmiVarList35::HmiVarList35
	VAR_OUTPUT
		ret_code 	: ConfStates;
	END_VAR

	ret_code := C_OK;
  ClassSvr := 0;
  ByteSize := 0;
  DefaultInit();

END_FUNCTION

FUNCTION HmiVarList35::DefaultInit
  
  Ptr := NIL;
  
END_FUNCTION

FUNCTION GLOBAL HmiVarList35::Free
  
  DefaultInit();

END_FUNCTION

FUNCTION GLOBAL HmiVarList35::Start

  Free();
  ClassSvr := 0;
  ByteSize := 0;

END_FUNCTION

FUNCTION GLOBAL HmiVarList35::AddEntry
	VAR_INPUT
		og 	: DINT;
		ug 	: DINT;
		textdescribing 	: UINT;
		textunit 	: UINT;
	END_VAR
	VAR_OUTPUT
		retcode 	: UDINT;
	END_VAR
  var
    pvar : ^_BOX_VARLIST;
    pdst : ^_BOX_VARLIST_ENTRY;
  end_var

  retcode := 16#FFFFFFFF;

  if(Ptr = NIL) then
    Ptr := #xData[0];
    _memset(Ptr, 0, sizeof(xData));
    pvar$^void := Ptr;
    pvar^.no           := 0;
    pvar^.boxhdr.size  := 0;
    pvar^.boxhdr.crc32 := 0;
  end_if;

  pvar$^void := Ptr;
  if(pvar^.no < MAXVARNUMBER35) then
    pdst     := #pvar^.data[0]; // decieve boundexceed
    pdst     += pvar^.no * sizeof(_BOX_VARLIST_ENTRY);
    pdst^.og := og;
    pdst^.ug := ug;
    pdst^.textdescribing := textdescribing;
    pdst^.textunit       := textunit;
    retcode := pvar^.no;
    pvar^.no += 1;
    ClassSvr += 1;
  end_if;
  
END_FUNCTION

FUNCTION GLOBAL HmiVarList35::End
	VAR_OUTPUT
		retcode 	: ^void;
	END_VAR
  var
    pvar : ^_BOX_VARLIST;
  end_var

  if(Ptr <> NIL) then
    pvar$^void := Ptr;
    ClassSvr   := pvar^.no;
    pvar^.boxhdr.size := 0;
    end_BIGBOX_HEADER(#pvar^.boxhdr, sizeof(_BOX_VARLIST) - sizeof(pvar^.data) + (pvar^.no * sizeof(_BOX_VARLIST_ENTRY)));
    ByteSize   := pvar^.boxhdr.size;
  else
    ClassSvr   := 0;
    ByteSize   := 0;
  end_if;
  
  retcode := Ptr;

END_FUNCTION
