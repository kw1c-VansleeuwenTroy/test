//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION
#include "..\..\Source\Common\hmi_nuc.h"

(*!
<Class
	Name               = "HmiScreen"
	Revision           = "0.1"
	GUID               = "{D25A4793-6EF5-48C4-A7CC-235B2CE640F7}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)">
	<Channels>
		<Client Name="MemCircle" Required="true" Internal="true"/>
		<Client Name="MemImage" Required="true" Internal="true"/>
		<Client Name="MemIO" Required="true" Internal="true"/>
		<Client Name="MemLine" Required="true" Internal="true"/>
		<Client Name="MemRectangle" Required="true" Internal="true"/>
		<Client Name="MemText" Required="true" Internal="true"/>
		<Client Name="MemZorder" Required="true" Internal="true"/>
	</Channels>
	<Dependencies>
		<Files>
			<File Path=".\Source\Common\hmi_nuc.h" Include="true"/>
		</Files>
	</Dependencies>
	<RevDoku>
		<Owner Company="sigmatek" Author="kolott"/>
		<Dokumentation Revision="0.1" Date="2014-04-15" Author="kolott" Company="sigmatek" Description="new method FreeMem()"/>
	</RevDoku>
	<Network Name="HmiScreen">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{DE61605B-B1DB-4667-AC7A-272EEA2BB570}"
				Class      = "HmiBaseList"
				Position   = "(218,120)"
				Visualized = "false">
				<Channels>
					<Server Name="ClassSvr"/>
					<Client Name="File"/>
				</Channels>
			</Object>
			<Object
				Name       = "MemCircle"
				GUID       = "{F235288C-DEFA-4F9C-8F68-1EBC7CC934E1}"
				Class      = "HmiMemCircle"
				Position   = "(600,510)"
				Visualized = "false">
				<Channels>
					<Server Name="ClassSvr"/>
					<Client Name="File"/>
				</Channels>
			</Object>
			<Object
				Name       = "MemImage"
				GUID       = "{94730C1D-43EA-4011-BCCE-584BA62E2C33}"
				Class      = "HmiMemImage"
				Position   = "(600,810)"
				Visualized = "false">
				<Channels>
					<Server Name="ClassSvr"/>
					<Client Name="File"/>
				</Channels>
			</Object>
			<Object
				Name       = "MemIO"
				GUID       = "{9D7EF36C-95A3-447D-B50A-F1468F730B38}"
				Class      = "HmiMemIO"
				Position   = "(210,810)"
				Visualized = "false">
				<Channels>
					<Server Name="ClassSvr"/>
					<Client Name="File"/>
				</Channels>
			</Object>
			<Object
				Name       = "MemLine"
				GUID       = "{FB1FAF15-4D3C-4A45-B393-9146274A1600}"
				Class      = "HmiMemLine"
				Position   = "(600,660)"
				Visualized = "false">
				<Channels>
					<Server Name="ClassSvr"/>
					<Client Name="File"/>
				</Channels>
			</Object>
			<Object
				Name       = "MemRectangle"
				GUID       = "{CB0096B3-47B9-461F-8BD5-58E239F880AD}"
				Class      = "HmiMemRectangle"
				Position   = "(210,510)"
				Visualized = "false">
				<Channels>
					<Server Name="ClassSvr"/>
					<Client Name="File"/>
				</Channels>
			</Object>
			<Object
				Name       = "MemText"
				GUID       = "{3F02E1F7-371F-4D52-9265-291207CEEEE5}"
				Class      = "HmiMemText"
				Position   = "(210,660)"
				Visualized = "false">
				<Channels>
					<Server Name="ClassSvr"/>
					<Client Name="File"/>
				</Channels>
			</Object>
			<Object
				Name       = "MemZorder"
				GUID       = "{AB4217B3-8082-40C9-8475-63286F02E258}"
				Class      = "HmiMemZorder"
				Position   = "(450,330)"
				Visualized = "false">
				<Channels>
					<Server Name="ClassSvr"/>
					<Client Name="File"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.ClassSvr" Destination="_base.ClassSvr" Vertices="(1072,210),(518,210),"/>
			<Connection Source="_base.File" Destination="this.File" Vertices="(218,210),(38,210),"/>
			<Connection Source="this.MemZorder" Destination="MemZorder.ClassSvr"/>
			<Connection Source="MemZorder.File" Destination="this.File" Vertices="(450,420),(38,210),"/>
			<Connection Source="this.MemRectangle" Destination="MemRectangle.ClassSvr"/>
			<Connection Source="MemRectangle.File" Destination="this.File" Vertices="(210,600),(38,210),"/>
			<Connection Source="this.MemText" Destination="MemText.ClassSvr"/>
			<Connection Source="MemText.File" Destination="this.File" Vertices="(210,750),(38,210),"/>
			<Connection Source="this.MemIO" Destination="MemIO.ClassSvr"/>
			<Connection Source="MemIO.File" Destination="this.File" Vertices="(210,900),(38,210),"/>
			<Connection Source="this.MemCircle" Destination="MemCircle.ClassSvr"/>
			<Connection Source="MemCircle.File" Destination="this.File" Vertices="(600,600),(38,210),"/>
			<Connection Source="this.MemLine" Destination="MemLine.ClassSvr"/>
			<Connection Source="MemLine.File" Destination="this.File" Vertices="(600,750),(38,210),"/>
			<Connection Source="this.MemImage" Destination="MemImage.ClassSvr"/>
			<Connection Source="MemImage.File" Destination="this.File" Vertices="(600,900),(38,210),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using HmiBaseList

HmiScreen : CLASS
: HmiBaseList
  //Servers:
  //Clients:
	MemRectangle 	: CltChCmd_HmiMemRectangle;
	MemText 	: CltChCmd_HmiMemText;
	MemIO 	: CltChCmd_HmiMemIO;
	MemCircle 	: CltChCmd_HmiMemCircle;
	MemLine 	: CltChCmd_HmiMemLine;
	MemImage 	: CltChCmd_HmiMemImage;
	MemZorder 	: CltChCmd_HmiMemZorder;
  //Variables:
		StartFunct 	: UDINT;
		EndFunct 	: UDINT;
  //Functions:
	
	FUNCTION VIRTUAL Load
		VAR_OUTPUT
			retcode 	: BOOL;
		END_VAR;
	
	FUNCTION VIRTUAL Free;
	
	FUNCTION GLOBAL GetZorder
		VAR_INPUT
			index 	: UDINT;
		END_VAR
		VAR_OUTPUT
			retcode 	: ^HMI_ANYTHING;
		END_VAR;
	
	FUNCTION GLOBAL GetZorderNo
		VAR_OUTPUT
			retcode 	: UDINT;
		END_VAR;
	
	FUNCTION GLOBAL GetControl
		VAR_INPUT
			pany 	: ^HMI_ANYTHING;
		END_VAR
		VAR_OUTPUT
			retcode 	: ^void;
		END_VAR;
	
	FUNCTION GLOBAL GetStartFunct
		VAR_OUTPUT
			retcode 	: UDINT;
		END_VAR;
	
	FUNCTION GLOBAL GetEndFunct
		VAR_OUTPUT
			retcode 	: UDINT;
		END_VAR;
	
	FUNCTION GLOBAL FreeMem;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using HmiMemCircle
#pragma using HmiMemImage
#pragma using HmiMemIO
#pragma using HmiMemLine
#pragma using HmiMemRectangle
#pragma using HmiMemText
#pragma using HmiMemZorder


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB HmiScreen::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_HMISCREEN
0$UINT, 1$UINT, (SIZEOF(::HmiScreen))$UINT, 
0$UINT, 7$UINT, 0$UINT, 
TO_UDINT(2118014258), "HmiScreen", //Class
TO_UDINT(3735923847), "HmiBaseList", 0$UINT, 0$UINT, //Baseclass
//Servers:
//Clients:
(::HmiScreen.MemRectangle.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(4153456916), "MemRectangle", TO_UDINT(2462046095), "HmiMemRectangle", 0$UINT, 0$UINT, 
(::HmiScreen.MemText.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1797020047), "MemText", TO_UDINT(2174260293), "HmiMemText", 0$UINT, 0$UINT, 
(::HmiScreen.MemIO.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1964078388), "MemIO", TO_UDINT(568511237), "HmiMemIO", 0$UINT, 0$UINT, 
(::HmiScreen.MemCircle.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(418917266), "MemCircle", TO_UDINT(3426238687), "HmiMemCircle", 0$UINT, 0$UINT, 
(::HmiScreen.MemLine.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2172865214), "MemLine", TO_UDINT(1795655540), "HmiMemLine", 0$UINT, 0$UINT, 
(::HmiScreen.MemImage.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2248440523), "MemImage", TO_UDINT(4250916264), "HmiMemImage", 0$UINT, 0$UINT, 
(::HmiScreen.MemZorder.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3829376362), "MemZorder", TO_UDINT(822070823), "HmiMemZorder", 0$UINT, 0$UINT, 
END_FUNCTION


#define USER_CNT_HmiScreen 2

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_HmiScreen] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION HmiScreen::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= HmiBaseList::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= HmiBaseList::ClassSvr.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, HmiBaseList::ClassSvr.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_HmiScreen;
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #Load();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[1]		:= #Free();

#pragma warning (default : 74)
	HmiBaseList::ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF HmiBaseList::ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION

FUNCTION VIRTUAL HmiScreen::Free

  MemZorder.Free();
  MemRectangle.Free();
  MemText.Free();
  MemIO.Free();
  MemCircle.Free();
  MemLine.Free();
  MemImage.Free();

END_FUNCTION

FUNCTION VIRTUAL HmiScreen::Load
	VAR_OUTPUT
		retcode 	: BOOL;
	END_VAR
  VAR
  	any : HMI_ANYTHING;
    tmp16 : uint;
    room : HMI_ROOM;
  END_VAR

  init_HMI_ANYTHING(#any);
  StartFunct := HMI_DEFSCOPE;
  EndFunct   := HMI_DEFSCOPE;

  File.Read_HMI_ROOM(#room); // position laden
  
  File.Read_HMI_ANYTHING(#any); // start-funktion laden
  if(any.ima = HMI_IMA_V_FUNCTIONLIST) then
    StartFunct := to_udint(any.value);
  end_if;
  
  File.Read_HMI_ANYTHING(#any); // ready-funktion laden
  if(any.ima = HMI_IMA_V_FUNCTIONLIST) then
    if(StartFunct = HMI_DEFSCOPE) then
      StartFunct := to_udint(any.value);
    end_if;
  end_if;
  
  File.Read_HMI_ANYTHING(#any); // run-funktion laden
  
  File.Read_HMI_ANYTHING(#any); // end-funktion laden
  if(any.ima = HMI_IMA_V_FUNCTIONLIST) then
    EndFunct := to_udint(any.value);
  end_if;
  
  File.FRead(#tmp16, 2); // firstinput x
  File.FRead(#tmp16, 2); // firstinput y
  File.FRead(#tmp16, 1); // statebits
        
  MemZorder.Load();
  MemRectangle.Load();
  MemText.Load();
  MemIo.Load();
  MemCircle.Load();
  MemLine.Load();
  MemImage.Load();
        
//  MemKeypad.Load();

  retcode := File.FChkFile();
  if(retcode = false) then
    Free();
  end_if;

END_FUNCTION

FUNCTION GLOBAL HmiScreen::GetZorder
	VAR_INPUT
		index 	: UDINT;
	END_VAR
	VAR_OUTPUT
		retcode 	: ^HMI_ANYTHING;
	END_VAR

  retcode := MemZorder.Get(index);

END_FUNCTION

FUNCTION GLOBAL HmiScreen::GetZorderNo
	VAR_OUTPUT
		retcode 	: UDINT;
	END_VAR

  retcode := MemZorder.GetNo();

END_FUNCTION

FUNCTION GLOBAL HmiScreen::GetControl
	VAR_INPUT
		pany 	: ^HMI_ANYTHING;
	END_VAR
	VAR_OUTPUT
		retcode 	: ^void;
	END_VAR

  retcode := NIL;
  if(pany <> NIL) then
    case(pany^.ima) of
      HMI_IMA_V_RECTANGLE : retcode := MemRectangle.Get(to_udint(pany^.value));
      HMI_IMA_V_LINE      : retcode := MemLine.Get(to_udint(pany^.value));
      HMI_IMA_V_CIRCLE    : retcode := MemCircle.Get(to_udint(pany^.value));
      HMI_IMA_V_TEXT      : retcode := MemText.Get(to_udint(pany^.value));
      HMI_IMA_V_IMAGE     : retcode := MemImage.Get(to_udint(pany^.value));
      HMI_IMA_V_IO        : retcode := MemIO.Get(to_udint(pany^.value));
    end_case;  
  end_if;
  
END_FUNCTION

FUNCTION GLOBAL HmiScreen::GetStartFunct
	VAR_OUTPUT
		retcode 	: UDINT;
	END_VAR

  retcode := StartFunct;

END_FUNCTION

FUNCTION GLOBAL HmiScreen::GetEndFunct
	VAR_OUTPUT
		retcode 	: UDINT;
	END_VAR

  retcode := EndFunct;

END_FUNCTION


FUNCTION GLOBAL HmiScreen::FreeMem

  Free();

END_FUNCTION
