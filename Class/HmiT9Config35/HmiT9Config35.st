//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "HmiT9Config35"
	Revision           = "0.0"
	GUID               = "{A3AB5C98-3432-4BF2-B5B7-BA170B73C195}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)">
	<Channels>
		<Server Name="ByteSize" GUID="{E8B26417-6F0A-47E9-84FB-EC302CE89E44}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="ClassSvr" GUID="{6CC4F33A-9586-4153-B4AC-2D8A517EA06F}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
	</Channels>
	<RevDoku>
		<Owner/>
		<Dokumentation Revision="0.0" Date="2020-06-18" Author="kolott" Company="sigmatek" Description="release"/>
	</RevDoku>
</Class>
*)
HmiT9Config35 : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	ByteSize 	: SvrCh_UDINT;
  //Clients:
  //Variables:
		Data : ARRAY [0..255] OF USINT;

  //Functions:
	
	FUNCTION GLOBAL Start;
				//! <Function Comment="Set addressed key to given caharcter.&#13;&#10;Note: maximum of 6 characters can be given to each key. Index can be from 0 to 11." Name="SetKey"/>
	FUNCTION GLOBAL SetKey
		VAR_INPUT
			idx 	: UDINT;			//! <Variable Comment="Index of key (0-11)" Name="SetKey.idx"/>
			psrc 	: ^CHAR;			//! <Variable Comment="characters to give" Name="SetKey.psrc"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: BOOL;			//! <Variable Comment="true when given characters are sucessfull set, on the other hand false." Name="SetKey.retcode"/>
		END_VAR;
	
	FUNCTION TAB T9Std;
				//! <Function Comment="Set addressed key to ensure functionality of switching letter between big and small." Name="SetKeyBig"/>
	FUNCTION GLOBAL SetKeyBig
		VAR_INPUT
			idx 	: UDINT;
		END_VAR
		VAR_OUTPUT
			retcode 	: BOOL;
		END_VAR;
	
	FUNCTION GLOBAL End
		VAR_OUTPUT
			retcode 	: ^void;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB HmiT9Config35::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_HMIT9CONFIG35
0$UINT, 0$UINT, (SIZEOF(::HmiT9Config35))$UINT, 
2$UINT, 0$UINT, 0$UINT, 
TO_UDINT(536866305), "HmiT9Config35", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::HmiT9Config35.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::HmiT9Config35.ByteSize.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1607089543), "ByteSize", 
//Clients:
END_FUNCTION


#define USER_CNT_HmiT9Config35 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_HmiT9Config35] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION HmiT9Config35::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR

	ret_code := C_OK;

END_FUNCTION

//{{LSL_IMPLEMENTATION

#includeC "..\LseEasy\Create.h"

FUNCTION TAB HmiT9Config35::T9Std

  '*','!','?','1', 0 , 0 ,   // KeyT9_1
  'a','b','c','2', 0 , 0 ,   // KeyT9_2
  'd','e','f','3', 0 , 0 ,   // KeyT9_3
  'g','h','i','4', 0 , 0 ,   // KeyT9_4
  'j','k','l','5', 0 , 0 ,   // KeyT9_5
  'm','n','o','6', 0 , 0 ,   // KeyT9_6
  'p','q','r','s','7', 0 ,   // KeyT9_7
  't','u','v','8', 0 , 0 ,   // KeyT9_8
  'w','x','y','z','9', 0 ,   // KeyT9_9
  '.',',',':',';','#', 0 ,   // KeyT9_COMMA
  ' ','_','-','0', 0 , 0 ,   // KeyT9_0
	23,  0 , 0 , 0 , 0 , 0 ,   // KeyT9_BIG

END_FUNCTION

FUNCTION GLOBAL HmiT9Config35::Start
  VAR
  	pt9 : ^_BOX_T9CONFIGLIST;
  END_VAR
  
  ByteSize := 0;
  
  pt9 := #Data$_BOX_T9CONFIGLIST;
  _memcpy(#pt9^.data[0], #T9Std()+4, 12*6);
  pt9^.boxhdr.size  := 0;
  pt9^.boxhdr.crc32 := 0;
  pt9^.no_planes    := 1;
  pt9^.no_keys      := 12;
    
END_FUNCTION

FUNCTION GLOBAL HmiT9Config35::SetKey
	VAR_INPUT
		idx 	: UDINT;
		psrc 	: ^CHAR;
	END_VAR
	VAR_OUTPUT
    retcode : bool;
	END_VAR
  VAR
  	len : udint;
  	pt9 : ^_BOX_T9CONFIGLIST;
    pkey : ^char;
  END_VAR

  retcode := false;

  if(idx < 12) then
    if(psrc <> nil) then
      len := _strlen(psrc);
      
      if((len > 0) & (len < 7)) then
        pt9  := #Data$_BOX_T9CONFIGLIST;
        pkey := #pt9^.data[idx*6];
        _memset(pkey, 0, 6);
        _memcpy(pkey, psrc, len);
        ByteSize := sizeof(_BOX_T9CONFIGLIST);
        retcode  := true;
      end_if;
    end_if;
  end_if;

END_FUNCTION

FUNCTION GLOBAL HmiT9Config35::SetKeyBig
	VAR_INPUT
		idx 	: UDINT;
	END_VAR
	VAR_OUTPUT
    retcode : bool;
	END_VAR
  VAR
  	tmp : array[0..1] of char;
  END_VAR

  tmp[0]  := 23;
  tmp[1]  := 0;
  retcode := SetKey(idx, #tmp[0]);

END_FUNCTION

FUNCTION GLOBAL HmiT9Config35::End
	VAR_OUTPUT
		retcode 	: ^void;
	END_VAR

  retcode := nil;
  if(ByteSize <> 0) then
    retcode := end_BIGBOX_HEADER(#Data$_BIGBOX_HEADER, sizeof(_BOX_T9CONFIGLIST));
  end_if;
  
END_FUNCTION
