//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "HmiImageList"
	Revision           = "0.3"
	GUID               = "{7445D16E-E947-41CB-A769-312EE49645C8}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)">
	<Channels>
		<Client Name="Label" Required="true" Internal="true"/>
		<Client Name="StringLib" Required="true" Internal="false"/>
	</Channels>
	<Dependencies>
		<Files>
			<File Path=".\Class\HmiImageList\CBmpConv.cpp"/>
			<File Path=".\Class\HmiImageList\CBmpConv.h" Include="false"/>
		</Files>
	</Dependencies>
	<RevDoku>
		<Owner Company="sigmatek" Author="kolott"/>
		<Dokumentation Revision="0.3" Date="2018-03-06" Author="kolott" Company="sigmatek" Description="sa40364, DEVSW-395: New method XChange() to xchange image done with lse by Bitmap"/>
		<Dokumentation Revision="0.2" Date="2014-04-15" Author="kolott" Company="sigmatek" Description="new method FreeMem()"/>
		<Dokumentation Revision="0.1" Date="2014-02-28" Author="kolott" Company="sigmatek" Description="betterment speed"/>
	</RevDoku>
	<Network Name="HmiImageList">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{FC0DF77A-E3CB-4D80-9001-02216265B826}"
				Class      = "HmiBaseList"
				Position   = "(218,120)"
				Visualized = "false">
				<Channels>
					<Server Name="ClassSvr"/>
					<Client Name="File"/>
				</Channels>
			</Object>
			<Object
				Name       = "Label"
				GUID       = "{2999DDCD-5D3C-4AEB-925C-21AEE50C2EB0}"
				Class      = "HmiAsciiBuffer"
				Position   = "(210,300)"
				Visualized = "false">
				<Channels>
					<Server Name="ClassSvr"/>
					<Client Name="File"/>
					<Client Name="StringLib"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.ClassSvr" Destination="_base.ClassSvr" Vertices="(690,210),(518,210),"/>
			<Connection Source="_base.File" Destination="this.File" Vertices="(218,210),(38,210),"/>
			<Connection Source="this.Label" Destination="Label.ClassSvr"/>
			<Connection Source="Label.File" Destination="this.File" Vertices="(210,390),(38,210),"/>
			<Connection Source="Label.StringLib" Destination="this.StringLib" Vertices="(210,450),(38,270),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using HmiBaseList

HmiImageList : CLASS
: HmiBaseList
  //Servers:
  //Clients:
	Label 	: CltChCmd_HmiAsciiBuffer;
	StringLib 	: CltChCmd_HmiStrLib;
  //Variables:
		No 	: UDINT;
		Ptr 	: ^HMI_IMAGEINFO;
		IncNo 	: UDINT;
  //Functions:
	
	FUNCTION HmiImageList
		VAR_OUTPUT
			ret_code 	: ConfStates;
		END_VAR;
	
	FUNCTION VIRTUAL Load
		VAR_OUTPUT
			retcode 	: BOOL;
		END_VAR;
	
	FUNCTION VIRTUAL Free;
	
	FUNCTION Init_IMAGE
		VAR_INPUT
			pi 	: ^HMI_IMAGEINFO;
		END_VAR;
	
	FUNCTION Free_IMAGE
		VAR_INPUT
			pi 	: ^HMI_IMAGEINFO;
		END_VAR;
	
	FUNCTION GLOBAL Get
		VAR_INPUT
			index 	: UDINT;
		END_VAR
		VAR_OUTPUT
			retcode 	: ^HMI_IMAGEINFO;
		END_VAR;
	
	FUNCTION GLOBAL IncNumber
		VAR_OUTPUT
			retcode 	: UDINT;
		END_VAR;
	
	FUNCTION GLOBAL GetIndexByName
		VAR_INPUT
			name 	: ^CHAR;
		END_VAR
		VAR_OUTPUT
			retcode 	: UDINT;
		END_VAR;
	
	FUNCTION GLOBAL FreeMem;
	
	FUNCTION GLOBAL XChange
		VAR_INPUT
			name 	: ^CHAR;
			dpne 	: ^CHAR;
		END_VAR
		VAR_OUTPUT
			retcode 	: BOOL;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using HmiAsciiBuffer
#pragma usingLtd HmiStrLib


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB HmiImageList::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_HMIIMAGELIST
0$UINT, 3$UINT, (SIZEOF(::HmiImageList))$UINT, 
0$UINT, 2$UINT, 0$UINT, 
TO_UDINT(3242935315), "HmiImageList", //Class
TO_UDINT(3735923847), "HmiBaseList", 0$UINT, 0$UINT, //Baseclass
//Servers:
//Clients:
(::HmiImageList.Label.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(4193489496), "Label", TO_UDINT(3253426089), "HmiAsciiBuffer", 0$UINT, 1$UINT, 
(::HmiImageList.StringLib.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000110$UINT, TO_UDINT(3243119075), "StringLib", TO_UDINT(103556616), "HmiStrLib", 0$UINT, 2$UINT, 
END_FUNCTION


#define USER_CNT_HmiImageList 2

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_HmiImageList] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION HmiImageList::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= HmiBaseList::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= HmiBaseList::ClassSvr.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, HmiBaseList::ClassSvr.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_HmiImageList;
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #Load();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[1]		:= #Free();

#pragma warning (default : 74)
	HmiBaseList::ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF HmiBaseList::ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ret_code	:= HmiImageList();

END_FUNCTION

//{{LSL_IMPLEMENTATION

#include "CBmpConv.h"

FUNCTION HmiImageList::HmiImageList
	VAR_OUTPUT
		ret_code 	: ConfStates;
	END_VAR

  Ptr      := NIL;
  No       := 0;
  IncNo    := 0;
	ret_code := C_OK;
  ClassSvr := 0;

END_FUNCTION

FUNCTION HmiImageList::Init_IMAGE
	VAR_INPUT
		pi 	: ^HMI_IMAGEINFO;
	END_VAR

  pi^.width       := 0; 
  pi^.height      := 0; 
  pi^.transparent := 0; 
  pi^.state       := 0; 
  pi^.datano      := 0; 
  pi^.ptr         := NIL;
  pi^.index35     := HMI_DEFSCOPE;

END_FUNCTION

FUNCTION HmiImageList::Free_IMAGE
	VAR_INPUT
		pi 	: ^HMI_IMAGEINFO;
	END_VAR
  
  File.Memory(#pi^.ptr, 0); 
  Init_IMAGE(pi); 

END_FUNCTION

FUNCTION VIRTUAL HmiImageList::Free
  VAR
  	ph : ^HMI_IMAGEINFO;
  END_VAR

  ph := Ptr;
  while(No) do
    Free_IMAGE(ph);
    No -= 1;
    ph += sizeof(HMI_IMAGEINFO);
  end_while;

  if(Ptr <> NIL) then
    File.Memory(#Ptr$^void, 0);
  end_if;
  Label.Free();
  Ptr      := NIL;
  No       := 0;
  IncNo    := 0;
  ClassSvr := 0;

END_FUNCTION

FUNCTION VIRTUAL HmiImageList::Load
	VAR_OUTPUT
		retcode 	: BOOL;
	END_VAR
  var
    anz : uint; 
    tmp : ^HMI_IMAGEINFO;
    single : uint;
    size : udint;
  end_var; 

  retcode := false;

  if(File.FRead(#single$void, 2) = true) then
    if(single = 0) then // kein singleimagefileformat
      File.FRead(#anz$void, 2);
      if(File.FMemory(#Ptr$^void, anz * sizeof(HMI_IMAGEINFO)) = true) then
        tmp := Ptr; 
        while(anz) do
          Init_IMAGE(tmp); 
        
          File.FRead(#tmp^.datano$void, 4);  
          File.FRead(#tmp^.width$void, 2);  
          File.FRead(#tmp^.height$void, 2);  
          File.FRead(#tmp^.transparent$void, 2);  
          File.FRead(#tmp^.state$void, 2);

          if(tmp^.state and 0x0008) then // 8bit farbinfo
            size := tmp^.datano * 2;
            if(File.FMemory(#tmp^.ptr, size) = true) then
              File.FRead(tmp^.ptr, size);
            end_if;
          else
            size := tmp^.datano * 3;
            if(File.FMemory(#tmp^.ptr, size) = true) then
              File.FRead(tmp^.ptr, size);
            end_if;
          end_if;
          
          anz -= 1; 
          No  += 1; 
          tmp += sizeof(HMI_IMAGEINFO); 
        end_while; 

        if(File.FChkFile() = true) then 
          Label.Load();
          retcode := true; 
        else
          Free(); 
        end_if; 
      end_if;
    end_if; 
  end_if; 
  
  ClassSvr := to_dint(No); 

END_FUNCTION

FUNCTION GLOBAL HmiImageList::Get
	VAR_INPUT
		index 	: UDINT;
	END_VAR
	VAR_OUTPUT
		retcode 	: ^HMI_IMAGEINFO;
	END_VAR

  retcode := NIL;
  if(index < No) then
    retcode := Ptr + (index * sizeof(HMI_IMAGEINFO));
  end_if;
  
END_FUNCTION

FUNCTION GLOBAL HmiImageList::GetIndexByName
	VAR_INPUT
		name 	: ^CHAR;
	END_VAR
	VAR_OUTPUT
		retcode 	: UDINT;
	END_VAR

  retcode := Label.GetNoByName(name);

END_FUNCTION

FUNCTION GLOBAL HmiImageList::IncNumber
	VAR_OUTPUT
		retcode 	: UDINT;
	END_VAR

  retcode := IncNo;
  IncNo += 1;

END_FUNCTION

FUNCTION GLOBAL HmiImageList::FreeMem

  Free();

END_FUNCTION

FUNCTION GLOBAL HmiImageList::XChange
	VAR_INPUT
		name 	: ^CHAR;
		dpne 	: ^CHAR;
	END_VAR
	VAR_OUTPUT
		retcode 	: BOOL;
	END_VAR
  VAR
  	pdst : ^HMI_IMAGEINFO;
    pbmp : ^void;
    praw, traw : ^tcRaw;
    pbmo : ^tcBmo; 
  END_VAR

  retcode := false;
  
  if((name <> NIL) & (dpne <> NIL)) then
  
    pdst := Get(GetIndexByName(name)); // pointer auf dst ermitteln
    if(pdst <> NIL) then
  
      pbmp := File.GetFileContent(dpne); // file auslesen
      if(pbmp <> NIL) then
          praw := bcBitmapToRaw(pbmp); // in raw format konvertieren
          File.FMemory(#pbmp, 0); // free filecontent, wird nicht mehr benötigt

          if(praw <> NIL) then
            if((praw^.width <> pdst^.width) | (praw^.height <> pdst^.height)) then
              traw := bcRawClone(pdst^.width, pdst^.height, praw); // grösse ändern
              if(traw <> NIL) then
                bcFreeRaw(praw);
                praw := traw;
              end_if;
            end_if;
            
            pbmo := bcRawToBmo(praw); // in bmo-format wandeln
            if(pbmo <> NIL) then
            
              pdst^.width       := pbmo^.width;
              pdst^.height      := pbmo^.height;
              pdst^.datano      := pbmo^.datano;
              pdst^.transparent := pbmo^.transparent;
              pdst^.datano      := pbmo^.datano;
              pdst^.state       := pbmo^.state;
              
              File.FMemory(#pdst^.ptr, 0); // alten bmo-puffer freigeben
              pdst^.ptr         := pbmo^.ptr;
              pbmo^.ptr         := NIL; // bmp pointer initialisieren
            
              bcFreeBmo(pbmo); // bmo freigeben
              retcode := true;
            end_if;
            
            bcFreeRaw(praw); // free praw 
            
          end_if;

        File.FMemory(#pbmp, 0); // ggf. free filecontent
      end_if;
    end_if;
  end_if;
  
END_FUNCTION

