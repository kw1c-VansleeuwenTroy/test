//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "HmiComPortCan"
	Revision           = "0.14"
	GUID               = "{1BDA3EE9-1AFB-4325-A093-5ED00B3B0323}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(490,120)">
	<Channels>
		<Client Name="CanInterface" Required="true" Internal="false" DefValue="1"/>
		<Client Name="CanNodeDisplay" Required="true" Internal="false" DefValue="1"/>
		<Client Name="CanRxMsgID" Required="true" Internal="false" DefValue="16#40"/>
		<Client Name="CanSend" Required="true" Internal="true"/>
		<Client Name="CanTxMsgID" Required="true" Internal="false" DefValue="16#20"/>
		<Client Name="CoCanLib" Required="false" Internal="false"/>
	</Channels>
	<RevDoku>
		<Owner Company="sigmatek" Author="kolott"/>
		<Dokumentation Revision="0.14" Date="2015-06-11" Author="hoechr1" Company="sigmatek" Description="SA31241: inserted client for communication over hardware modules"/>
		<Dokumentation Revision="0.13" Date="2015-03-16" Author="kolott" Company="sigmatek" Description="SA30531: new Clients CanRxMsgID and CanTxMsgID"/>
		<Dokumentation Revision="0.12" Date="2014-11-27" Author="kolott" Company="sigmatek" Description="code reduced to can-connection"/>
		<Dokumentation Revision="0.11" Date="2014-08-28" Author="kolott" Company="sigmatek" Description="function &quot;UserCall&quot; added, extended timeout at flashkill &#13;&#10;retry implemented at method SendFile()"/>
		<Dokumentation Revision="0.10" Date="2014-06-13" Author="kolott" Company="sigmatek" Description="attribut &quot;virtual global&quot; added to method SendData()"/>
		<Dokumentation Revision="0.9" Date="2014-05-14" Author="kolott" Company="sigmatek" Description="evaluate retcode of method UpdateData()"/>
		<Dokumentation Revision="0.8" Date="2014-04-24" Author="kolott" Company="sigmatek" Description="new Method SendRestartSetup()"/>
		<Dokumentation Revision="0.7" Date="2014-04-02" Author="kolott" Company="sigmatek" Description="ErrorCnt will count on tx error as well"/>
		<Dokumentation Revision="0.6" Date="2014-03-04" Author="kolott" Company="sigmatek" Description="new Method GetNode()"/>
		<Dokumentation Revision="0.5" Date="2014-02-21" Author="kolott" Company="sigmatek" Description="new Method: GetHwVersion(), GetSwVersion()"/>
		<Dokumentation Revision="0.4" Date="2014-02-13" Author="kolott" Company="sigmatek" Description="innovation"/>
		<Dokumentation Revision="0.3" Date="2014-02-12" Author="kolott" Company="sigmatek" Description="new command LastUsage of HMI implemented"/>
		<Dokumentation Revision="0.2" Date="2014-01-29" Author="kolott" Company="sigmatek" Description="innovation: speed"/>
		<Dokumentation Revision="0.1" Date="2014-01-16" Author="kolott" Company="sigmatek" Description="method SendTrendValue added"/>
	</RevDoku>
	<Network Name="HmiComPortCan">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{3DC12998-BA47-48EA-8928-AFD2DEA97316}"
				Class      = "HmiComPort"
				Position   = "(218,120)"
				Visualized = "false">
				<Channels>
					<Server Name="ClassSvr"/>
					<Server Name="ErrorCnt"/>
					<Server Name="RetryCnt"/>
					<Server Name="RxData"/>
					<Server Name="TxData"/>
					<Client Name="CoSys"/>
					<Client Name="StdLib"/>
				</Channels>
			</Object>
			<Object
				Name       = "CanSend"
				GUID       = "{31FF8A10-640D-4E83-B210-D5FAEB6DBC03}"
				Class      = "HmiCanSendReceive"
				Position   = "(210,510)"
				Visualized = "false">
				<Channels>
					<Server Name="ClassSvr"/>
					<Server Name="ErrorCnt"/>
					<Server Name="RxPack"/>
					<Server Name="TxPack"/>
					<Server Name="TxRetry"/>
					<Client Name="CanInterface" Value="1"/>
					<Client Name="CanNodeDisplay" Value="1"/>
					<Client Name="CanRxMsgID" Value="16#40"/>
					<Client Name="CanTxMsgID" Value="16#20"/>
					<Client Name="CoCan"/>
					<Client Name="CoCanLib"/>
					<Client Name="CoSys"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.ClassSvr" Destination="_base.ClassSvr" Vertices="(690,210),(518,210),"/>
			<Connection Source="this.CanSend" Destination="CanSend.ClassSvr"/>
			<Connection Source="CanSend.CanNodeDisplay" Destination="this.CanNodeDisplay" Vertices="(210,600),(38,510),"/>
			<Connection Source="CanSend.CanInterface" Destination="this.CanInterface" Vertices="(210,660),(38,570),"/>
			<Connection Source="this.RxData" Destination="_base.RxData" Vertices="(690,270),(518,270),"/>
			<Connection Source="this.TxData" Destination="_base.TxData" Vertices="(690,330),(518,330),"/>
			<Connection Source="this.ErrorCnt" Destination="_base.ErrorCnt" Vertices="(690,390),(518,390),"/>
			<Connection Source="this.RetryCnt" Destination="_base.RetryCnt" Vertices="(690,450),(518,450),"/>
			<Connection Source="CanSend.CanRxMsgID" Destination="this.CanRxMsgID" Vertices="(210,720),(38,630),"/>
			<Connection Source="CanSend.CanTxMsgID" Destination="this.CanTxMsgID" Vertices="(210,780),(38,690),"/>
			<Connection Source="CanSend.CoCanLib" Destination="this.CoCanLib" Vertices="(210,960),(38,750),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using HmiComPort

HmiComPortCan : CLASS
: HmiComPort
  //Servers:
  //Clients:
	CanNodeDisplay 	: CltCh_DINT;
	CanInterface 	: CltCh_DINT;
	CanSend 	: CltChCmd_HmiCanSendReceive;
	CanRxMsgID 	: CltCh_DINT;
	CanTxMsgID 	: CltCh_DINT;
	CoCanLib 	: CltChCmd__CanLib;
  //Variables:
		RxCrc 	: UDINT;
		Crc 	: UDINT;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Start
		VAR_INPUT
			pthis 	: ^void;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL GetNode
		VAR_OUTPUT
			retcode 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL SendDataIntern
		VAR_INPUT
			src 	: ^void;
			size 	: UDINT;
		END_VAR
		VAR_OUTPUT
			retcode 	: BOOL;
		END_VAR;
				//! <Function Comment="Get timeout in milliseconds to wait for rx-data" Name="GetRxTimeout"/>
	FUNCTION VIRTUAL GetRxTimeout
		VAR_INPUT
			index 	: TRxTimeout;
		END_VAR
		VAR_OUTPUT
			retcode 	: UDINT;
		END_VAR;
	
	FUNCTION GLOBAL RxCallback
		VAR_INPUT
			pthis 	: ^HmiComPortCan;
			pdata 	: ^USINT;
			size 	: UDINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using HmiCanSendReceive
#pragma usingLtd _CanLib


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB HmiComPortCan::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_HMICOMPORTCAN
0$UINT, 14$UINT, (SIZEOF(::HmiComPortCan))$UINT, 
0$UINT, 6$UINT, 0$UINT, 
TO_UDINT(4239410787), "HmiComPortCan", //Class
TO_UDINT(136722037), "HmiComPort", 0$UINT, 16$UINT, //Baseclass
//Servers:
//Clients:
(::HmiComPortCan.CanNodeDisplay.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000110$UINT, TO_UDINT(4066256044), "CanNodeDisplay", 
(::HmiComPortCan.CanInterface.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000110$UINT, TO_UDINT(1034073295), "CanInterface", 
(::HmiComPortCan.CanSend.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2078967582), "CanSend", TO_UDINT(2189921946), "HmiCanSendReceive", 0$UINT, 2$UINT, 
(::HmiComPortCan.CanRxMsgID.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000110$UINT, TO_UDINT(1802155902), "CanRxMsgID", 
(::HmiComPortCan.CanTxMsgID.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000110$UINT, TO_UDINT(146440772), "CanTxMsgID", 
(::HmiComPortCan.CoCanLib.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000100$UINT, TO_UDINT(655268246), "CoCanLib", TO_UDINT(529317953), "_CanLib", 1$UINT, 10$UINT, 
END_FUNCTION


#define USER_CNT_HmiComPortCan 37

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_HmiComPortCan] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION HmiComPortCan::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= HmiComPort::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= HmiComPort::ClassSvr.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, HmiComPort::ClassSvr.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_HmiComPortCan;
#pragma warning (disable : 74)
	vmt.UserFcts[9]		:= #Start();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[28]		:= #GetNode();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[31]		:= #SendDataIntern();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[32]		:= #GetRxTimeout();

#pragma warning (default : 74)
	HmiComPort::ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF HmiComPort::ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION

FUNCTION VIRTUAL GLOBAL HmiComPortCan::Start
	VAR_INPUT
		pthis 	: ^void;
	END_VAR

  HmiComPort::Start(pthis);
  CanSend.Start(#RxCallback(), this);
  RetryNo := 2;  // 2 retry after first fail

END_FUNCTION

FUNCTION GLOBAL HmiComPortCan::RxCallback
	VAR_INPUT
		pthis 	: ^HmiComPortCan;
		pdata 	: ^USINT;
		size 	: UDINT;
	END_VAR

  this := pthis;
  RecieveData(pdata, size);

END_FUNCTION

FUNCTION VIRTUAL GLOBAL HmiComPortCan::GetNode
	VAR_OUTPUT
		retcode 	: UDINT;
	END_VAR

  retcode := to_udint(CanNodeDisplay);

END_FUNCTION

FUNCTION VIRTUAL HmiComPortCan::GetRxTimeout
	VAR_INPUT
		index 	: TRxTimeout;
	END_VAR
	VAR_OUTPUT
		retcode 	: UDINT;
	END_VAR

  retcode := HmiComPort::GetRxTimeout(index);
  case index of 
    RxDelayStandard   : retcode :=   150;
    RxDelayFlashWrite : retcode := 40000;
    RxDelayFlashKill  : retcode :=  3000;
  end_case;

END_FUNCTION

FUNCTION VIRTUAL HmiComPortCan::SendDataIntern
	VAR_INPUT
		src 	: ^void;
		size 	: UDINT;
	END_VAR
	VAR_OUTPUT
		retcode 	: BOOL;
	END_VAR

  //  WaitBusy();
  retcode := CanSend.SendData(src, size);

END_FUNCTION
