//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION
#include "..\..\Source\Common\hmi_nuc.h"

(*!
<Class
	Name               = "HmiFunctionList"
	Revision           = "0.2"
	GUID               = "{C73439F4-7EB7-4025-9935-A14C601713ED}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)">
	<Channels>
	</Channels>
	<Dependencies>
		<Files>
			<File Path=".\Source\Common\hmi_nuc.h" Include="true"/>
		</Files>
	</Dependencies>
	<RevDoku>
		<Owner Company="sigmatek" Author="kolott"/>
		<Dokumentation Revision="0.2" Date="2014-04-15" Author="kolott" Company="sigmatek" Description="new method FreeMem()"/>
		<Dokumentation Revision="0.1" Date="2014-02-28" Author="kolott" Company="sigmatek" Description="speed"/>
	</RevDoku>
	<Network Name="HmiFunctionList">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{849F1E29-023A-4D32-849A-45444A386488}"
				Class      = "HmiBaseList"
				Position   = "(218,120)"
				Visualized = "false">
				<Channels>
					<Server Name="ClassSvr"/>
					<Client Name="File"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.ClassSvr" Destination="_base.ClassSvr" Vertices="(690,210),(518,210),"/>
			<Connection Source="_base.File" Destination="this.File" Vertices="(218,210),(38,210),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using HmiBaseList

HmiFunctionList : CLASS
: HmiBaseList
  //Servers:
  //Clients:
  //Variables:
		No 	: UDINT;
		Ptr 	: ^HMI_FCTBLOCK;
  //Functions:
	
	FUNCTION HmiFunctionList
		VAR_OUTPUT
			ret_code 	: ConfStates;
		END_VAR;
	
	FUNCTION VIRTUAL Load
		VAR_OUTPUT
			retcode 	: BOOL;
		END_VAR;
	
	FUNCTION VIRTUAL Free;
	
	FUNCTION HMI_FCTBLOCK_Init
		VAR_INPUT
			fcb 	: ^HMI_FCTBLOCK;
		END_VAR;
	
	FUNCTION HMI_FCTBLOCK_Free
		VAR_INPUT
			fcb 	: ^HMI_FCTBLOCK;
		END_VAR;
	
	FUNCTION HMI_FCTBLOCK_Load
		VAR_INPUT
			fcb 	: ^HMI_FCTBLOCK;
		END_VAR
		VAR_OUTPUT
			retcode 	: BOOL;
		END_VAR;
	
	FUNCTION HMI_FCTLINE_Load
		VAR_INPUT
			fcl 	: ^HMI_FCTLINE;
		END_VAR
		VAR_OUTPUT
			retcode 	: BOOL;
		END_VAR;
	
	FUNCTION GLOBAL Get
		VAR_INPUT
			index 	: UDINT;
		END_VAR
		VAR_OUTPUT
			retcode 	: ^void;
		END_VAR;
	
	FUNCTION GLOBAL FreeMem;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB HmiFunctionList::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_HMIFUNCTIONLIST
0$UINT, 2$UINT, (SIZEOF(::HmiFunctionList))$UINT, 
0$UINT, 0$UINT, 0$UINT, 
TO_UDINT(3842677476), "HmiFunctionList", //Class
TO_UDINT(3735923847), "HmiBaseList", 0$UINT, 0$UINT, //Baseclass
//Servers:
//Clients:
END_FUNCTION


#define USER_CNT_HmiFunctionList 2

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_HmiFunctionList] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION HmiFunctionList::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= HmiBaseList::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= HmiBaseList::ClassSvr.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, HmiBaseList::ClassSvr.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_HmiFunctionList;
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #Load();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[1]		:= #Free();

#pragma warning (default : 74)
	HmiBaseList::ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF HmiBaseList::ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ret_code	:= HmiFunctionList();

END_FUNCTION

//{{LSL_IMPLEMENTATION

FUNCTION HmiFunctionList::HmiFunctionList
	VAR_OUTPUT
		ret_code 	: ConfStates;
	END_VAR

	ret_code := C_OK;
  Ptr      := NIL;
  No       := 0;
  ClassSvr := 0;

END_FUNCTION

FUNCTION HmiFunctionList::HMI_FCTBLOCK_Init
	VAR_INPUT
		fcb 	: ^HMI_FCTBLOCK;
	END_VAR

  fcb^.No      := 0;
  fcb^.Ptr     := NIL;
  fcb^.index35 := HMI_DEFSCOPE;

END_FUNCTION

FUNCTION HmiFunctionList::HMI_FCTBLOCK_Free
	VAR_INPUT
		fcb 	: ^HMI_FCTBLOCK;
	END_VAR
  var
    tmpno : uint;
    tmptr : ^HMI_FCTLINE;
  end_var

  tmptr := fcb^.ptr;
  tmpno := fcb^.no;
  
  while(tmpno) do
    tmpno -= 1;
    free_HMI_FCTLINE(tmptr);
    tmptr += sizeof(HMI_FCTLINE);
  end_while;

  File.Memory(#fcb^.ptr$^void, 0);
  
  HMI_FCTBLOCK_Init(fcb);

END_FUNCTION

FUNCTION VIRTUAL HmiFunctionList::Free
  VAR
  	ph : ^HMI_FCTBLOCK;
  END_VAR

  ph := Ptr;
  while(No) do
    HMI_FCTBLOCK_Free(ph);
    No -= 1;
    ph += sizeof(HMI_FCTBLOCK);
  end_while;

  if(Ptr <> NIL) then
    File.Memory(#Ptr$^void, 0);
  end_if;
  
  Ptr      := NIL;
  No       := 0;
  ClassSvr := 0;

END_FUNCTION

FUNCTION HmiFunctionList::HMI_FCTLINE_Load
	VAR_INPUT
		fcl 	: ^HMI_FCTLINE;
	END_VAR
	VAR_OUTPUT
		retcode 	: BOOL;
	END_VAR

  File.FRead(#fcl^.qbef, 1);
  File.Read_HMI_ANYTHING(#fcl^.op1); 
  File.Read_HMI_ANYTHING(#fcl^.op2); 

  retcode := File.FChkFile();
  
  if(retcode = false) then
    free_HMI_FCTLINE(fcl);
  end_if;

END_FUNCTION

FUNCTION HmiFunctionList::HMI_FCTBLOCK_Load
	VAR_INPUT
		fcb 	: ^HMI_FCTBLOCK;
	END_VAR
	VAR_OUTPUT
		retcode 	: BOOL;
	END_VAR
  var
    anz : udint;
    tmp : ^HMI_FCTLINE;
  end_var

  if(File.FRead(#anz, 4) = true) then
    if(File.Memory(#fcb^.ptr$^void, anz * sizeof(HMI_FCTLINE)) = true) then
      tmp     := fcb^.ptr; 
      fcb^.no := to_uint(anz); 
      while(anz) do
        init_HMI_FCTLINE(tmp); 
        HMI_FCTLINE_Load(tmp); 
        tmp += sizeof(HMI_FCTLINE); 
        anz -= 1; 
      end_while; 
    end_if;
  end_if;

  retcode := File.FChkFile();
  
  if(retcode = false) then
    HMI_FCTBLOCK_Free(fcb);
  end_if;

END_FUNCTION

FUNCTION VIRTUAL HmiFunctionList::Load
	VAR_OUTPUT
		retcode 	: BOOL;
	END_VAR
  var
    anz : udint; 
    tmp : ^HMI_FCTBLOCK; 
  end_var

  if(File.FRead(#anz, 4) = true) then
    if(File.FMemory(#Ptr$^void, anz * sizeof(HMI_FCTBLOCK)) = true) then
      tmp := Ptr; 
      No  := anz; 
      while(anz) do
        HMI_FCTBLOCK_Init(tmp); 
        HMI_FCTBLOCK_Load(tmp); 
        tmp += sizeof(HMI_FCTBLOCK); 
        anz -= 1; 
      end_while; 
    end_if;
  end_if;
    
  retcode := File.FChkFile(); 
    
  if(retcode = false) then
    Free();
  end_if;

  ClassSvr := to_dint(No);
  
END_FUNCTION

FUNCTION GLOBAL HmiFunctionList::Get
	VAR_INPUT
		index 	: UDINT;
	END_VAR
	VAR_OUTPUT
		retcode 	: ^void;
	END_VAR

  retcode := NIL;
  if(index < No) then
    retcode := Ptr + (index * sizeof(HMI_FCTBLOCK));
  end_if;
  
END_FUNCTION


FUNCTION GLOBAL HmiFunctionList::FreeMem

  Free();

END_FUNCTION
