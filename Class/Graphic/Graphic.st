//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "Graphic"
	Revision           = "0.1"
	GUID               = "{08928CA9-4DE1-11D5-A20D-00902771F8BE}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "true"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	IconPath           = ".\Class\Graphic\GRAPHICS.ICO"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)"
	Comment            = "... a broad graphic API">
	<Channels>
		<Server Name="Server0" GUID="{08928CAA-4DE1-11D5-A20D-00902771F8BE}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
	</Channels>
	<Dependencies>
		<Files>
			<File Path=".\Source\code\OsiBase.h" Include="false"/>
			<File Path=".\GraphicTypes.h" Include="false"/>
			<File Path=".\St_grconst.h" Include="false"/>
			<File Path=".\St_graph.h" Include="false"/>
			<File Path=".\Source\code\OsiBase.st"/>
		</Files>
	</Dependencies>
</Class>
*)
Graphic : CLASS
  //Servers:
	Server0 	: SvrChCmd_DINT;
  //Clients:
  //Variables:
  //Functions:
	
	FUNCTION Graphic
		VAR_OUTPUT
			ret_code 	: ConfStates;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL _ReservedSpace_1;
	
	FUNCTION VIRTUAL GLOBAL _ReservedSpace_2;
	
	FUNCTION VIRTUAL GLOBAL _ReservedSpace_3;
	
	FUNCTION VIRTUAL GLOBAL _ReservedSpace_4;
	
	FUNCTION VIRTUAL GLOBAL _ReservedSpace_5;
	
	FUNCTION VIRTUAL GLOBAL _ReservedSpace_6;
	
	FUNCTION VIRTUAL GLOBAL _ReservedSpace_7;
	
	FUNCTION VIRTUAL GLOBAL _ReservedSpace_8;
	
	FUNCTION VIRTUAL GLOBAL _ReservedSpace_9;
	
	FUNCTION VIRTUAL GLOBAL _ReservedSpace_10;
	
	FUNCTION VIRTUAL GLOBAL _ReservedSpace_11;
	
	FUNCTION __CDECL VIRTUAL GLOBAL GetAbsTime
		VAR_OUTPUT
			retcode (EAX) 	: _UDWORD;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL _ReservedSpace_12;
	
	FUNCTION VIRTUAL GLOBAL _ReservedSpace_13;
	
	FUNCTION VIRTUAL GLOBAL _ReservedSpace_14;
	
	FUNCTION VIRTUAL GLOBAL _ReservedSpace_15;
	
	FUNCTION VIRTUAL GLOBAL _ReservedSpace_16;
	
	FUNCTION VIRTUAL GLOBAL _ReservedSpace_17;
	
	FUNCTION VIRTUAL GLOBAL _ReservedSpace_18;
	
	FUNCTION VIRTUAL GLOBAL _ReservedSpace_19;
	
	FUNCTION VIRTUAL GLOBAL _ReservedSpace_20;
	
	FUNCTION VIRTUAL GLOBAL _ReservedSpace_21;
	
	FUNCTION VIRTUAL GLOBAL _ReservedSpace_22;
	
	FUNCTION __CDECL VIRTUAL GLOBAL GetSRAMInfo
		VAR_INPUT
			len0 	: ^UDINT;
		END_VAR
		VAR_OUTPUT
			PSRam (EAX) 	: ^void;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL GetPointerToSRAM
		VAR_INPUT
			bank0 	: UDINT;
		END_VAR
		VAR_OUTPUT
			PSRam (EAX) 	: ^void;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL _ReservedSpace_23;
	
	FUNCTION VIRTUAL GLOBAL _ReservedSpace_24;
	
	FUNCTION VIRTUAL GLOBAL _ReservedSpace_25;
	
	FUNCTION __CDECL VIRTUAL GLOBAL OS_Wait;
	
	FUNCTION __CDECL VIRTUAL GLOBAL GetAddressVar
		VAR_INPUT
			name 	: ^CHAR;
			lasalID 	: ^void;
			comdef 	: ^void;
		END_VAR
		VAR_OUTPUT
			retcode (EAX) 	: _UDWORD;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL GetAddressObj
		VAR_INPUT
			name 	: ^CHAR;
			lasalID 	: ^void;
			comdef 	: ^void;
		END_VAR
		VAR_OUTPUT
			retcode (EAX) 	: _UDWORD;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL RegisterVar
		VAR_INPUT
			buf 	: ^void;
			comdef 	: ^void;
		END_VAR
		VAR_OUTPUT
			retcode (EAX) 	: _UDWORD;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL RegisterObj
		VAR_INPUT
			buf 	: ^void;
			comdef 	: ^void;
		END_VAR
		VAR_OUTPUT
			retcode (EAX) 	: _UDWORD;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL DeleteQueue
		VAR_INPUT
			channel 	: _UBYTE;
			comdef 	: ^void;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL Login
		VAR_INPUT
			comdef 	: ^void;
		END_VAR
		VAR_OUTPUT
			retcode (EAX) 	: _DWORD;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL SetExternFunction
		VAR_INPUT
			irqplc_functype 	: ^void;
			close_functype 	: ^void;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL SetData
		VAR_INPUT
			lasalID 	: ^void;
			isobj 	: _UBYTE;
			comdef 	: ^void;
			data 	: ^void;
		END_VAR
		VAR_OUTPUT
			retcode (EAX) 	: _UDWORD;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL GetData
		VAR_INPUT
			lasalID 	: ^void;
			isobj 	: _UBYTE;
			comdef 	: ^void;
			data 	: ^void;
		END_VAR
		VAR_OUTPUT
			retcode (EAX) 	: _UDWORD;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL MetaEvent;
	
	FUNCTION VIRTUAL GLOBAL _ReservedSpace_26;
	
	FUNCTION __CDECL VIRTUAL GLOBAL IRQ_PLC
		VAR_OUTPUT
			retcode (EAX) 	: ^void;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL LSE_Close
		VAR_OUTPUT
			retcode (EAX) 	: ^void;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL LSETimer
		VAR_INPUT
			pinvoid 	: ^void;
			inuword 	: _UDWORD;
		END_VAR
		VAR_OUTPUT
			retcode (EAX) 	: _DWORD;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL _ReservedSpace_27;
	
	FUNCTION __CDECL VIRTUAL GLOBAL GetPalette
		VAR_INPUT
			pinrgb 	: ^_UBYTE;
			start 	: _UWORD;
			cnt 	: _UWORD;
		END_VAR
		VAR_OUTPUT
			retcode (AX) 	: _UWORD;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL HideMouse;
	
	FUNCTION __CDECL VIRTUAL GLOBAL ShowMouse;
	
	FUNCTION __CDECL VIRTUAL GLOBAL IfNecHideMouse
		VAR_INPUT
			room 	: ^_ROOM;
		END_VAR
		VAR_OUTPUT
			retcode (AX) 	: _UWORD;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL IfNecShowMouse
		VAR_INPUT
			state 	: _UWORD;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL SetFontAttribute
		VAR_INPUT
			attrib 	: _ATTRIB;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL StrWidth
		VAR_INPUT
			str 	: ^void;
			chr_size 	: _UWORD;
		END_VAR
		VAR_OUTPUT
			retcode (AX) 	: _UWORD;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL InitGraph
		VAR_OUTPUT
			retcode (AX) 	: _UWORD;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL CloseGraph;
	
	FUNCTION __CDECL VIRTUAL GLOBAL GetScreenSize
		VAR_INPUT
			room 	: ^_ROOM;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL ReadPixel
		VAR_INPUT
			x1 	: _KOORD;
			y1 	: _KOORD;
		END_VAR
		VAR_OUTPUT
			retcode (EAX) 	: _COLOR;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL WritePixel
		VAR_INPUT
			x1 	: _KOORD;
			y1 	: _KOORD;
			attrib 	: _ATTRIB;
			color 	: _COLOR;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL Line
		VAR_INPUT
			x1 	: _KOORD;
			y1 	: _KOORD;
			x2 	: _KOORD;
			y2 	: _KOORD;
			attrib 	: _ATTRIB;
			color 	: _COLOR;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL Polygon
		VAR_INPUT
			inuword 	: _UWORD;
			indot 	: ^_DOT;
			inattrib 	: _ATTRIB;
			incolor 	: _COLOR;
		END_VAR
		VAR_OUTPUT
			retcode (EAX) 	: ^void;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL Rectangle
		VAR_INPUT
			x1 	: _KOORD;
			y1 	: _KOORD;
			x2 	: _KOORD;
			y2 	: _KOORD;
			attrib 	: _ATTRIB;
			color 	: _COLOR;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL Beam
		VAR_INPUT
			x1 	: _KOORD;
			y1 	: _KOORD;
			x2 	: _KOORD;
			y2 	: _KOORD;
			attrib 	: _ATTRIB;
			color 	: _COLOR;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL OutTextXY
		VAR_INPUT
			x1 	: _KOORD;
			y1 	: _KOORD;
			pTXT 	: ^void;
			attrib 	: _ATTRIB;
			color 	: _COLOR;
			chr_size 	: _UWORD;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL OutTextLen
		VAR_INPUT
			x1 	: _KOORD;
			y1 	: _KOORD;
			pTXT 	: ^void;
			cnt 	: _UWORD;
			attrib 	: _ATTRIB;
			color 	: _COLOR;
			chr_size 	: _UWORD;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL Arc
		VAR_INPUT
			x1 	: _KOORD;
			y1 	: _KOORD;
			x2 	: _KOORD;
			y2 	: _KOORD;
			start 	: _WORD;
			bend 	: _WORD;
			power 	: _UWORD;
			attrib 	: _ATTRIB;
			color 	: _COLOR;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL Oval
		VAR_INPUT
			x1 	: _KOORD;
			y1 	: _KOORD;
			x2 	: _KOORD;
			y2 	: _KOORD;
			start 	: _WORD;
			bend 	: _WORD;
			attrib 	: _ATTRIB;
			color 	: _COLOR;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL Button
		VAR_INPUT
			x1 	: _KOORD;
			y1 	: _KOORD;
			x2 	: _KOORD;
			y2 	: _KOORD;
			attrib 	: _ATTRIB;
			color1 	: _COLOR;
			color2 	: _COLOR;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL Scroll
		VAR_INPUT
			x1 	: _KOORD;
			y1 	: _KOORD;
			x2 	: _KOORD;
			y2 	: _KOORD;
			x3 	: _KOORD;
			y3 	: _KOORD;
			color 	: _COLOR;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL Bitmap
		VAR_INPUT
			x1 	: _KOORD;
			y1 	: _KOORD;
			pbmp 	: ^_BMP;
			attrib 	: _ATTRIB;
			color 	: _COLOR;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL ActivateFont
		VAR_INPUT
			infontptr 	: ^_FONTPTR;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL GetFontSize
		VAR_INPUT
			width 	: ^_UWORD;
			heigth 	: ^_UWORD;
			fontptr 	: ^_FONTPTR;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL FreeRegion
		VAR_INPUT
			region 	: ^_REGION;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL ActivateRegion
		VAR_INPUT
			inregion 	: ^void;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL DeactivateRegion;
	
	FUNCTION __CDECL VIRTUAL GLOBAL StartRegion;
	
	FUNCTION __CDECL VIRTUAL GLOBAL AddRegion
		VAR_INPUT
			pRoom 	: ^_ROOM;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL EndRegion
		VAR_OUTPUT
			retcode (EAX) 	: ^void;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL SubRegion
		VAR_INPUT
			region1 	: ^void;
			region2 	: ^void;
		END_VAR
		VAR_OUTPUT
			retcode (EAX) 	: ^void;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL AndRegion
		VAR_INPUT
			region1 	: ^void;
			region2 	: ^void;
		END_VAR
		VAR_OUTPUT
			retcode (EAX) 	: ^void;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL XorRegion
		VAR_INPUT
			region1 	: ^void;
			region2 	: ^void;
		END_VAR
		VAR_OUTPUT
			retcode (EAX) 	: ^void;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL OrRegion
		VAR_INPUT
			region1 	: ^void;
			region2 	: ^void;
		END_VAR
		VAR_OUTPUT
			retcode (EAX) 	: ^void;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL GetActiveRegion
		VAR_OUTPUT
			retcode (EAX) 	: ^void;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL GetNoColors
		VAR_OUTPUT
			retcode (EAX) 	: _UDWORD;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL GetImage
		VAR_INPUT
			image 	: ^_IMAGE;
			x1 	: _KOORD;
			y1 	: _KOORD;
			x2 	: _KOORD;
			y2 	: _KOORD;
		END_VAR
		VAR_OUTPUT
			retcode (AX) 	: _UWORD;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL PutImage
		VAR_INPUT
			image 	: ^_IMAGE;
			x1 	: _KOORD;
			y1 	: _KOORD;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL GetRetrace
		VAR_OUTPUT
			retcode (AX) 	: _UWORD;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL WaitForRetrace;
	
	FUNCTION __CDECL VIRTUAL GLOBAL IsGraphInit
		VAR_OUTPUT
			retcode (AX) 	: _UWORD;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL Memory
		VAR_INPUT
			ppMemptr 	: ^pVoid;
			size 	: _UDWORD;
		END_VAR
		VAR_OUTPUT
			retcode (AX) 	: _UWORD;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL OutXPixelPool
		VAR_INPUT
			koord 	: _KOORD;
			pkoord 	: ^_KOORD;
			uword1 	: _UWORD;
			uword2 	: _UWORD;
			attrib 	: _ATTRIB;
			color 	: _COLOR;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL OutYPixelPool
		VAR_INPUT
			inpkoord 	: ^_KOORD;
			inkoord 	: _KOORD;
			inuword1 	: _UWORD;
			inuword2 	: _UWORD;
			inattrib 	: _ATTRIB;
			incolor 	: _COLOR;
		END_VAR
		VAR_OUTPUT
			retcode (EAX) 	: ^void;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL OutPixelLine
		VAR_INPUT
			x1 	: _KOORD;
			y1 	: _KOORD;
			pSrc 	: ^_UBYTE;
			no 	: _UWORD;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL RoomInRegion
		VAR_INPUT
			room 	: ^_ROOM;
			region 	: ^void;
		END_VAR
		VAR_OUTPUT
			retcode (AX) 	: _UWORD;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL MakeTrueColor
		VAR_INPUT
			Red0 	: _UWORD;
			Green0 	: _UWORD;
			Blue0 	: _UWORD;
		END_VAR
		VAR_OUTPUT
			retcode (AX) 	: _UWORD;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL ShowCursor;
	
	FUNCTION __CDECL VIRTUAL GLOBAL MoveCursor
		VAR_INPUT
			x1 	: _KOORD;
			y1 	: _KOORD;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL LimitMouse
		VAR_INPUT
			x1 	: _KOORD;
			y1 	: _KOORD;
			x2 	: _KOORD;
			y2 	: _KOORD;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL StopMouse;
	
	FUNCTION __CDECL VIRTUAL GLOBAL StopEvent;
	
	FUNCTION __CDECL VIRTUAL GLOBAL StartEvent
		VAR_INPUT
			mask 	: _UWORD;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL StoreEvent
		VAR_INPUT
			pEvent 	: ^void;
		END_VAR
		VAR_OUTPUT
			retcode (AX) 	: _UWORD;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL KeyEvent
		VAR_INPUT
			wait 	: _UWORD;
			pEvent 	: ^void;
		END_VAR
		VAR_OUTPUT
			retcode (AX) 	: _UWORD;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL InitMouse
		VAR_OUTPUT
			retcode (AX) 	: _UWORD;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL _ReservedSpace_28;
	
	FUNCTION VIRTUAL GLOBAL _ReservedSpace_29;
	
	FUNCTION __CDECL VIRTUAL GLOBAL MakeColor
		VAR_INPUT
			fgcol 	: _COLOR;
			bgcol 	: _COLOR;
		END_VAR
		VAR_OUTPUT
			retcode (EAX) 	: _COLOR;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL MouseCursorStyle
		VAR_INPUT
			style 	: UINT;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL DestroyOffScreen
		VAR_INPUT
			pScreen 	: ^_NEWSCREEN;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL CreateOffScreen
		VAR_INPUT
			pScreen 	: ^_NEWSCREEN;
			width 	: _UWORD;
			height 	: _UWORD;
		END_VAR
		VAR_OUTPUT
			retcode (AX) 	: _UWORD;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL GetScreen
		VAR_INPUT
			pScreen 	: ^_NEWSCREEN;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL SetScreen
		VAR_INPUT
			pScreen 	: ^_NEWSCREEN;
		END_VAR
		VAR_OUTPUT
			retcode (AX) 	: _UWORD;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL CopyScreen
		VAR_INPUT
			dest 	: ^_NEWSCREEN;
			pScreen 	: ^_NEWSCREEN;
			pd 	: ^_ROOM;
			ps 	: ^_ROOM;
		END_VAR
		VAR_OUTPUT
			retcode (AX) 	: _UWORD;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL SetLCD_Contrast
		VAR_INPUT
			CMD 	: UINT;
			setval 	: UDINT;
		END_VAR
		VAR_OUTPUT
			retcode (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL SetLCD_Brightness
		VAR_INPUT
			CMD 	: UINT;
			setval 	: UDINT;
		END_VAR
		VAR_OUTPUT
			retcode (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL _ReservedSpace_30;
	
	FUNCTION __CDECL VIRTUAL GLOBAL SetNewCalibration
		VAR_INPUT
			raw0 	: ^void;
		END_VAR
		VAR_OUTPUT
			retval (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL _ReservedSpace_32;
	
	FUNCTION VIRTUAL GLOBAL _ReservedSpace_33;
	
	FUNCTION VIRTUAL GLOBAL _ReservedSpace_34;
	
	FUNCTION VIRTUAL GLOBAL _ReservedSpace_35;
	
	FUNCTION VIRTUAL GLOBAL _ReservedSpace_36;
	
	FUNCTION VIRTUAL GLOBAL _ReservedSpace_37;
	
	FUNCTION __CDECL VIRTUAL GLOBAL PenDashSet
		VAR_INPUT
			style 	: UDINT;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL PenDashDefine
		VAR_INPUT
			style 	: UDINT;
			pDash 	: ^_DASH;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL RotateScreen
		VAR_INPUT
			dest 	: ^_NEWSCREEN;
			src 	: ^_NEWSCREEN;
			pDest 	: ^_ROOM;
			pSrc 	: ^_ROOM;
			degree 	: INT;
		END_VAR
		VAR_OUTPUT
			retcode (AX) 	: UINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB Graphic::@CT_
0$UINT,
2#0100000000001000$UINT, //TY_GRAPHIC
0$UINT, 1$UINT, (SIZEOF(::Graphic))$UINT, 
1$UINT, 0$UINT, 0$UINT, 
TO_UDINT(1140816688), "Graphic", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::Graphic.Server0.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(2759080719), "Server0", 
//Clients:
END_FUNCTION


#define USER_CNT_Graphic 123

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_Graphic] OF ^Void;
	END_STRUCT;
END_TYPE



//{{LSL_IMPLEMENTATION


//*********************Inserted from .\code\Graphic.st*********************



 



#include "..\..\Source\code\OsiBase.h"


FUNCTION  Graphic::Graphic
VAR_OUTPUT
	ret_code		: CONFSTATES;
END_VAR

	ret_code	:= InitOsiM(_lsl_pOS^.piLSE, USER_CNT_Graphic);

END_FUNCTION // Graphic::Graphic

