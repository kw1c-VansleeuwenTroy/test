//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION
#include "..\..\Source\Common\hmi_nuc.h"

(*!
<Class
	Name               = "HmiVarInfoList"
	Revision           = "0.1"
	GUID               = "{0460ACFC-EC28-4120-AD24-6282E80EE881}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)">
	<Channels>
		<Server Name="ClassSvr" GUID="{7745F253-99D2-4DD1-AB98-85DC39F5A919}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Client Name="File" Required="true" Internal="false"/>
	</Channels>
	<Dependencies>
		<Files>
			<File Path=".\Source\Common\hmi_nuc.h" Include="true"/>
		</Files>
	</Dependencies>
	<RevDoku>
		<Owner Company="sigmatek" Author="kolott"/>
		<Dokumentation Revision="0.1" Date="2013-12-20" Author="kolott" Company="sigmatek" Description="release"/>
	</RevDoku>
</Class>
*)
HmiVarInfoList : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
  //Clients:
	File 	: CltChCmd_HmiFile;
  //Variables:
		No 	: UDINT;
		Ptr 	: ^HMI_VARINFO;
  //Functions:
	
	FUNCTION HmiVarInfoList
		VAR_OUTPUT
			ret_code 	: ConfStates;
		END_VAR;
	
	FUNCTION GLOBAL Free;
	
	FUNCTION GLOBAL Load
		VAR_OUTPUT
			retcode 	: BOOL;
		END_VAR;
	
	FUNCTION GLOBAL Get
		VAR_INPUT
			varno 	: UDINT;
		END_VAR
		VAR_OUTPUT
			retcode 	: ^HMI_VARINFO;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd HmiFile


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB HmiVarInfoList::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_HMIVARINFOLIST
0$UINT, 1$UINT, (SIZEOF(::HmiVarInfoList))$UINT, 
1$UINT, 1$UINT, 0$UINT, 
TO_UDINT(1002095878), "HmiVarInfoList", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::HmiVarInfoList.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
//Clients:
(::HmiVarInfoList.File.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3121273764), "File", TO_UDINT(2548286290), "HmiFile", 0$UINT, 4$UINT, 
END_FUNCTION


#define USER_CNT_HmiVarInfoList 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_HmiVarInfoList] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION HmiVarInfoList::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_HmiVarInfoList, pCmd := #vmt.CmdTable);
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ret_code	:= HmiVarInfoList();

END_FUNCTION

//{{LSL_IMPLEMENTATION

FUNCTION HmiVarInfoList::HmiVarInfoList
	VAR_OUTPUT
		ret_code 	: ConfStates;
	END_VAR

	ret_code := C_OK;
  Ptr := NIL; 
  No  := 0; 

END_FUNCTION

FUNCTION GLOBAL HmiVarInfoList::Free
  var
    tmp : ^HMI_VARINFO; 
  end_var

  tmp := Ptr; 
  while(No) do
    free_HMI_VARINFO(tmp);
    No -= 1; 
    tmp += sizeof(HMI_VARINFO); 
  end_while;
  
  File.FMemory(#Ptr$^void, 0); 
  
  Ptr := NIL; 
  No  := 0; 
  
END_FUNCTION

FUNCTION GLOBAL HmiVarInfoList::Load
	VAR_OUTPUT
		retcode 	: BOOL;
	END_VAR
  var
    anz : udint; 
    tmp : ^HMI_VARINFO;
    dum : usint;
  end_var; 
  
  Free();
  
  if(File.FRead(#anz$void, 4) = true) then
    if(File.FMemory(#Ptr$^void, anz * sizeof(HMI_VARINFO)) = true) then
      tmp := Ptr; 
      while(anz) do
        init_HMI_VARINFO(tmp);

        File.FRead(#tmp^.station$void, 1);
        File.FRead(#tmp^.reftime$void, 1);
        File.FRead(#tmp^.access$void, 1);
        File.FRead(#dum$void, 1);
        tmp^.vartype$usint := (dum and 16#7F);
        if(dum and 16#80) then
          tmp^.flags.leading0 := 1;
        end_if;
        File.FRead(#tmp^.subtype, 2);
        File.Read_HMI_ANYTHING(#tmp^.limit_lo);
        File.Read_HMI_ANYTHING(#tmp^.limit_hi);
        File.Read_HMI_ANYTHING(#tmp^.text1);
        File.Read_HMI_ANYTHING(#tmp^.unitschema);
        File.FRead(#tmp^.scope$void, 4);
        File.Read_HMI_CHKBIT(#tmp^.chkbit);
        if(File.GetCompilerVersion() >= 42) then
          File.FRead(#tmp^.parabit16, sizeof(uint));
        end_if;

        if((tmp^.vartype <> HMI_BINARY)&(tmp^.vartype <> HMI_BIT)&(tmp^.vartype <> HMI_COMPONENT)) then // zur sicherheit
          init_HMI_ANYTHING(#tmp^.unitschema);
        end_if;

        anz -= 1;
        No  += 1;
        tmp += sizeof(HMI_VARINFO);
      end_while;
      
      if(File.FChkFile() = true) then
        retcode := true;
      else
        Free();
      end_if;
    end_if;
  end_if;
  
  ClassSvr := to_dint(No);

END_FUNCTION

FUNCTION GLOBAL HmiVarInfoList::Get
	VAR_INPUT
		varno : udint;
	END_VAR
	VAR_OUTPUT
		retcode : ^HMI_VARINFO;
	END_VAR

  retcode := NIL;
  if(varno < No) then
    retcode := Ptr + (varno * sizeof(HMI_VARINFO));
  end_if;

END_FUNCTION
