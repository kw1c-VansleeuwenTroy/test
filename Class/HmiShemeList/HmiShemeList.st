//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION
#include "..\..\Source\Common\hmi_nuc.h"

(*!
<Class
	Name               = "HmiShemeList"
	Revision           = "0.3"
	GUID               = "{ABBF9D08-2217-46C2-9D4B-B7DABEC0B9F9}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)">
	<Channels>
	</Channels>
	<Dependencies>
		<Files>
			<File Path=".\Source\Common\hmi_nuc.h" Include="true"/>
		</Files>
	</Dependencies>
	<RevDoku>
		<Owner Company="sigmatek" Author="kolott"/>
		<Dokumentation Revision="0.3" Date="2014-08-06" Author="kolott" Company="sigmatek" Description="betterment in memorymanagement"/>
		<Dokumentation Revision="0.2" Date="2014-04-15" Author="kolott" Company="sigmatek" Description="new method FreeMem()"/>
		<Dokumentation Revision="0.1" Date="2014-02-28" Author="kolott" Company="sigmatek" Description="betterment speed"/>
	</RevDoku>
	<Network Name="HmiShemeList">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{9E8CB4E9-E207-4794-91FF-2E31E4FE0F92}"
				Class      = "HmiBaseList"
				Position   = "(218,120)"
				Visualized = "false">
				<Channels>
					<Server Name="ClassSvr"/>
					<Client Name="File"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.ClassSvr" Destination="_base.ClassSvr" Vertices="(690,210),(518,210),"/>
			<Connection Source="_base.File" Destination="this.File" Vertices="(218,210),(38,210),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using HmiBaseList

HmiShemeList : CLASS
: HmiBaseList
  //Servers:
  //Clients:
  //Variables:
		No 	: UDINT;
		Ptr 	: ^HMI_SCHEME;
  //Functions:
	
	FUNCTION HmiShemeList
		VAR_OUTPUT
			ret_code 	: ConfStates;
		END_VAR;
	
	FUNCTION VIRTUAL Load
		VAR_OUTPUT
			retcode 	: BOOL;
		END_VAR;
	
	FUNCTION VIRTUAL Free;
	
	FUNCTION HMI_SCHEME_Init
		VAR_INPUT
			tmp 	: ^HMI_SCHEME;
		END_VAR;
	
	FUNCTION HMI_SCHEME_Free
		VAR_INPUT
			tmp 	: ^HMI_SCHEME;
		END_VAR;
	
	FUNCTION HMI_SCHEME_Load
		VAR_INPUT
			psc 	: ^HMI_SCHEME;
		END_VAR
		VAR_OUTPUT
			retcode 	: BOOL;
		END_VAR;
	
	FUNCTION GLOBAL GetResult
		VAR_INPUT
			index 	: UDINT;
			value 	: DINT;
		END_VAR
		VAR_OUTPUT
			retcode 	: ^HMI_ANYTHING;
		END_VAR;
	
	FUNCTION GetSub
		VAR_INPUT
			value 	: DINT;
			pscm 	: ^HMI_SCHEME;
		END_VAR
		VAR_OUTPUT
			retcode 	: ^HMI_ANYTHING;
		END_VAR;
	
	FUNCTION GLOBAL Get
		VAR_INPUT
			index 	: UDINT;
		END_VAR
		VAR_OUTPUT
			retcode 	: ^HMI_SCHEME;
		END_VAR;
	
	FUNCTION GLOBAL GetServerNumber
		VAR_INPUT
			index 	: UDINT;
		END_VAR
		VAR_OUTPUT
			retcode 	: UDINT;
		END_VAR;
	
	FUNCTION GLOBAL FreeMem;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB HmiShemeList::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_HMISHEMELIST
0$UINT, 3$UINT, (SIZEOF(::HmiShemeList))$UINT, 
0$UINT, 0$UINT, 0$UINT, 
TO_UDINT(3851519469), "HmiShemeList", //Class
TO_UDINT(3735923847), "HmiBaseList", 0$UINT, 0$UINT, //Baseclass
//Servers:
//Clients:
END_FUNCTION


#define USER_CNT_HmiShemeList 2

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_HmiShemeList] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION HmiShemeList::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= HmiBaseList::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= HmiBaseList::ClassSvr.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, HmiBaseList::ClassSvr.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_HmiShemeList;
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #Load();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[1]		:= #Free();

#pragma warning (default : 74)
	HmiBaseList::ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF HmiBaseList::ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ret_code	:= HmiShemeList();

END_FUNCTION

//{{LSL_IMPLEMENTATION

#define SCROP_SMALLER       0x00 // <
#define SCROP_SMALLEQUAL    0x01 // <=
#define SCROP_EQUAL         0x02 // ==
#define SCROP_BIGGEREQUAL   0x03 // >=
#define SCROP_BIGGER        0x04 // >
#define SCROP_NOTEQUAL      0x05 // !=
#define SCROP_DEFAULT       0x06 // 

FUNCTION HmiShemeList::HmiShemeList
	VAR_OUTPUT
		ret_code 	: ConfStates;
	END_VAR

	ret_code := C_OK;
  No       := 0;
  Ptr      := NIL;
  ClassSvr := 0;

END_FUNCTION

FUNCTION HmiShemeList::HMI_SCHEME_Init
	VAR_INPUT
		tmp 	: ^HMI_SCHEME;
	END_VAR
  
  init_HMI_SCHEME(tmp);

END_FUNCTION

FUNCTION HmiShemeList::HMI_SCHEME_Free
	VAR_INPUT
		tmp 	: ^HMI_SCHEME;
	END_VAR

  File.Memory(#tmp^.ptr$^void, 0); 
  HMI_SCHEME_Init(tmp);

END_FUNCTION

FUNCTION VIRTUAL HmiShemeList::Free
  var 
    tmp : ^HMI_SCHEME; 
  end_var

  tmp := Ptr; 
  while(No) do
    No -= 1; 
    HMI_SCHEME_Free(tmp);
    tmp += sizeof(HMI_SCHEME);
  end_while;
  
  File.Memory(#Ptr, 0);

  No       := 0;
  Ptr      := NIL;
  ClassSvr := 0;

END_FUNCTION

FUNCTION HmiShemeList::HMI_SCHEME_Load
	VAR_INPUT
		psc 	: ^HMI_SCHEME;
	END_VAR
	VAR_OUTPUT
		retcode 	: BOOL;
	END_VAR
  var
    psl : ^HMI_SCHEMELINE;
    anz : udint;
  end_var
  
  File.FRead(#psc^.serverno, 4);
  if(File.FRead(#anz, 4) = true) then
    if(File.FMemory(#psc^.ptr$^void, anz * sizeof(HMI_SCHEMELINE)) = true) then
      psc^.no := to_uint(anz);
      psl     := psc^.ptr;
      while(anz) do
        init_HMI_SCHEMELINE(psl);
        
        File.FRead(#psl^.operator, 1);
        File.FRead(#psl^.op2, 4);
        File.Read_HMI_ANYTHING(#psl^.any);        
        
        psl += sizeof(HMI_SCHEMELINE);
        anz -= 1;
      end_while;
    end_if;
  end_if;
  
  retcode := File.FChkFile();
  
END_FUNCTION

FUNCTION VIRTUAL HmiShemeList::Load
	VAR_OUTPUT
		retcode 	: BOOL;
	END_VAR
  var
    anz : UDINT;
    tmp : ^HMI_SCHEME;
  end_var
  
  if(File.FRead(#anz, 4) = true) then

    if(File.FMemory(#Ptr$^void, anz*sizeof(HMI_SCHEME)) = true) then
      No  := anz;
      tmp := Ptr;
      while(anz) do
        HMI_SCHEME_Init(tmp);
        HMI_SCHEME_Load(tmp);
        tmp += sizeof(HMI_SCHEME);
        anz -= 1;
      end_while;
    end_if;
  end_if;
  
  retcode  := File.FChkFile();
  
  ClassSvr := to_int(No);

END_FUNCTION

FUNCTION HmiShemeList::GetSub
	VAR_INPUT
		value 	: DINT;
		pscm 	: ^HMI_SCHEME;
	END_VAR
	VAR_OUTPUT
		retcode 	: ^HMI_ANYTHING;
	END_VAR
  VAR
  	no : uint;
    pln : ^HMI_SCHEMELINE;
  END_VAR
  
  retcode := NIL;
  
  no  := pscm^.no;
  pln := pscm^.ptr;
  while(no) do
    no  -= 1;
    case(pln^.operator) of
      SCROP_SMALLER     : if(value <  pln^.op2) then retcode := #pln^.any; return; end_if;
      SCROP_SMALLEQUAL  : if(value <= pln^.op2) then retcode := #pln^.any; return; end_if;
      SCROP_EQUAL       : if(value =  pln^.op2) then retcode := #pln^.any; return; end_if;
      SCROP_BIGGEREQUAL : if(value >= pln^.op2) then retcode := #pln^.any; return; end_if;
      SCROP_BIGGER      : if(value >  pln^.op2) then retcode := #pln^.any; return; end_if;
      SCROP_NOTEQUAL    : if(value <> pln^.op2) then retcode := #pln^.any; return; end_if;
      SCROP_DEFAULT     : retcode := #pln^.any; return;
      else                no := 0;
    end_case;
    pln += sizeof(HMI_SCHEMELINE);
  end_while;

END_FUNCTION

FUNCTION GLOBAL HmiShemeList::GetResult
	VAR_INPUT
		index 	: UDINT;
		value 	: DINT;
	END_VAR
	VAR_OUTPUT
		retcode 	: ^HMI_ANYTHING;
	END_VAR

  retcode := NIL;
  if(index < No) then
    retcode := GetSub(value, Ptr + index * sizeof(HMI_SCHEME));
  end_if;

END_FUNCTION

FUNCTION GLOBAL HmiShemeList::Get
	VAR_INPUT
		index 	: UDINT;
	END_VAR
	VAR_OUTPUT
		retcode 	: ^HMI_SCHEME;
	END_VAR

  retcode := nil;
  if(index < No) then
    retcode := Ptr + index * sizeof(HMI_SCHEME);
  end_if;
  
END_FUNCTION

FUNCTION GLOBAL HmiShemeList::GetServerNumber
	VAR_INPUT
		index 	: UDINT;
	END_VAR
	VAR_OUTPUT
		retcode 	: udint;
	END_VAR
  VAR
  	pscm : ^HMI_SCHEME;
  END_VAR

  retcode := 16#FFFFFFFF;
  pscm    := Get(index);
  if(pscm <> nil) then
    retcode := pscm^.serverno;
  end_if;

END_FUNCTION


FUNCTION GLOBAL HmiShemeList::FreeMem

  Free();

END_FUNCTION
