//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "_Screen"
	Revision           = "0.3"
	GUID               = "{E741BF68-4F63-11D5-8991-00902787C19C}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	IconPath           = ".\Class\_Screen\Screen.ico"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)"
	Comment            = "userinterface">
	<Channels>
		<Server Name="Screen" GUID="{E741BF69-4F63-11D5-8991-00902787C19C}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Client Name="ImA" Required="true" Internal="false"/>
		<Client Name="Lse" Required="true" Internal="false"/>
		<Client Name="No" Required="true" Internal="false"/>
	</Channels>
	<RevDoku>
		<Owner Company="sigmatek" Author="kolott"/>
		<Dokumentation Revision="0.3" Date="2016-11-07" Author="kolott" Company="sigmatek" Description="new virtual method S_WindowMoveable() is added"/>
		<Dokumentation Revision="0.2" Date="2013-02-28" Author="kolott" Company="sigmatek" Description="new methode S_CreateNew()&#13;&#10;icon added"/>
		<Dokumentation Revision="0.1" Date="2012-05-15" Author="kolott" Company="sigmatek" Description="optimization"/>
	</RevDoku>
</Class>
*)
_Screen : CLASS
  //Servers:
	Screen 	: SvrChCmd_DINT;
  //Clients:
	Lse 	: CltChCmd__Lse;
	No 	: CltCh_UDINT;
	ImA 	: CltCh_UDINT;
  //Variables:
		WhoAmI 	: _WHOAMI;
		FirstTime 	: BOOL;
  //Functions:
	
	FUNCTION _Screen
		VAR_OUTPUT
			ret_code 	: ConfStates;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL S_End
		VAR_INPUT
			pic 	: ^void;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL S_Run
		VAR_INPUT
			pic 	: ^void;
			event 	: ^_EVENT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL S_Ready
		VAR_INPUT
			pic 	: ^void;
			firsttime 	: BOOL;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL S_Start
		VAR_INPUT
			pic 	: ^void;
			firsttime 	: BOOL;
		END_VAR;
				//! <Function Comment="method is used to create screen/window by program (without lse)&#13;&#10;kernel will call method only if screen/window is not present in lse-project" Name="S_CreateNew"/>
	FUNCTION VIRTUAL GLOBAL S_CreateNew
		VAR_INPUT
			psetup 	: ^_NEWSCREENPROP;
		END_VAR
		VAR_OUTPUT
			retcode 	: BOOL;
		END_VAR;
				//! <Function Comment="method is called to get information if window is moveable by user.&#13;&#10;return &apos;true&apos; if window is moveable, on the other hand &apos;false&apos;" Name="S_WindowMoveable"/>
	FUNCTION VIRTUAL GLOBAL S_WindowMoveable
		VAR_OUTPUT
			retcode 	: BOOL;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd _Lse


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB _Screen::@CT_
0$UINT,
2#0100000000000000$UINT, //TY__SCREEN
0$UINT, 3$UINT, (SIZEOF(::_Screen))$UINT, 
1$UINT, 3$UINT, 0$UINT, 
TO_UDINT(3599188277), "_Screen", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::_Screen.Screen.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(800368310), "Screen", 
//Clients:
(::_Screen.Lse.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(299963966), "Lse", TO_UDINT(1552551876), "_Lse", 0$UINT, 128$UINT, 
(::_Screen.No.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(3376426101), "No", 
(::_Screen.ImA.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(3288739603), "ImA", 
END_FUNCTION


#define USER_CNT__Screen 6

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT__Screen] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION _Screen::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT__Screen, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Write		:= #M_WR_DIRECT();
	vmt.CmdTable.Init		:= #Init();
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #S_End();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[1]		:= #S_Run();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[2]		:= #S_Ready();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[3]		:= #S_Start();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[4]		:= #S_CreateNew();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[5]		:= #S_WindowMoveable();

#pragma warning (default : 74)
	Screen.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF Screen.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ret_code	:= _Screen();

END_FUNCTION

//{{LSL_IMPLEMENTATION

#pragma warning (disable : 73)

FUNCTION  _Screen::_Screen
VAR_OUTPUT
	ret_code		: CONFSTATES;
END_VAR

  FirstTime := TRUE;
  ret_code	:= C_OK;

END_FUNCTION

FUNCTION VIRTUAL GLOBAL _Screen::Init

  if(FirstTime = TRUE) then
    init_WHOAMI(#WhoAmI);
    WhoAmI.ima := (ImA.Read())$_IMA; //IMA_PICTURE;
    WhoAmI.no  := No.Read(); //0;
    Lse.AddScreen(this, #whoami);
    FirstTime := FALSE;
  end_if;

END_FUNCTION

FUNCTION VIRTUAL GLOBAL _Screen::S_Start
VAR_INPUT
	pic		    : ^VOID;
	firsttime	: BOOL;
END_VAR

END_FUNCTION 

FUNCTION VIRTUAL GLOBAL _Screen::S_Ready
VAR_INPUT
	pic		    : ^VOID;
	firsttime	: BOOL;
END_VAR

END_FUNCTION

FUNCTION VIRTUAL GLOBAL _Screen::S_Run
VAR_INPUT
	pic		    : ^VOID;
	event		: ^_EVENT;
END_VAR

END_FUNCTION

FUNCTION VIRTUAL GLOBAL _Screen::S_End
VAR_INPUT
	pic		    : ^VOID;
END_VAR

END_FUNCTION 

FUNCTION VIRTUAL GLOBAL _Screen::S_CreateNew
	VAR_INPUT
		psetup 	: ^_NEWSCREENPROP;
	END_VAR
	VAR_OUTPUT
		retcode 	: BOOL;
	END_VAR

  retcode := false;

END_FUNCTION

FUNCTION VIRTUAL GLOBAL _Screen::S_WindowMoveable
	VAR_OUTPUT
		retcode 	: BOOL;
	END_VAR

  retcode := true;

END_FUNCTION
