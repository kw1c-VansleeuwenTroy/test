//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "_XAccess"
	Revision           = "0.1"
	GUID               = "{37E81646-519A-11D8-8BCB-0048545E8899}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)"
	Comment            = "provides whole functionality to ensure different access-levels">
	<Channels>
		<Server Name="Key1" GUID="{37E8164D-519A-11D8-8BCB-0048545E8899}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Key2" GUID="{37E8164E-519A-11D8-8BCB-0048545E8899}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Key3" GUID="{37E8164F-519A-11D8-8BCB-0048545E8899}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Level" GUID="{37E8164C-519A-11D8-8BCB-0048545E8899}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server
			Name           = "Server0"
			Initialize     = "false"
			Visualized     = "true"
			WriteProtected = "false">
		</Server>
		<Server Name="TimeOut" GUID="{37E8164B-519A-11D8-8BCB-0048545E8899}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Client Name="Ram0" Required="true" Internal="true"/>
		<Client Name="Ram1" Required="true" Internal="true"/>
		<Client Name="Ram2" Required="true" Internal="true"/>
		<Client Name="Ram3" Required="true" Internal="true"/>
	</Channels>
	<RevDoku>
		<Owner Company="Sigmatek"/>
		<Dokumentation Revision="0.1" Date="2011-08-30" Author="Spimar" Company="Sigmatek" Description="Optimized speed of function;"/>
	</RevDoku>
	<Network Name="_XAccess">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{37E81649-519A-11D8-8BCB-0048545E8899}"
				Class      = "_Global"
				Position   = "(270,150)"
				Visualized = "true">
				<Channels>
					<Server Name="Server0"/>
					<Client Name="Lse"/>
				</Channels>
			</Object>
			<Object
				Name       = "Ram0"
				GUID       = "{37E81652-519A-11D8-8BCB-0048545E8899}"
				Class      = "Ram"
				Position   = "(270,330)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
				</Channels>
			</Object>
			<Object
				Name       = "Ram1"
				GUID       = "{37E81655-519A-11D8-8BCB-0048545E8899}"
				Class      = "Ram"
				Position   = "(270,510)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
				</Channels>
			</Object>
			<Object
				Name       = "Ram2"
				GUID       = "{37E81658-519A-11D8-8BCB-0048545E8899}"
				Class      = "Ram"
				Position   = "(270,690)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
				</Channels>
			</Object>
			<Object
				Name       = "Ram3"
				GUID       = "{37E8165B-519A-11D8-8BCB-0048545E8899}"
				Class      = "Ram"
				Position   = "(270,870)"
				Visualized = "true">
				<Channels>
					<Server Name="Data"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.Server0" Destination="_base.Server0" Vertices="(742,210),(570,240),"/>
			<Connection Source="_base.Lse" Destination="this.Lse" Vertices="(270,240),(38,210),"/>
			<Connection Source="this.Ram0" Destination="Ram0.Data"/>
			<Connection Source="this.Ram1" Destination="Ram1.Data"/>
			<Connection Source="this.Ram2" Destination="Ram2.Data"/>
			<Connection Source="this.Ram3" Destination="Ram3.Data"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using _Global

_XAccess : CLASS
: _Global
  //Servers:
	TimeOut 	: SvrCh_DINT;
	Level 	: SvrCh_DINT;
	Key1 	: SvrCh_DINT;
	Key2 	: SvrCh_DINT;
	Key3 	: SvrCh_DINT;
  //Clients:
	Ram0 	: CltChCmd_Ram;
	Ram1 	: CltChCmd_Ram;
	Ram2 	: CltChCmd_Ram;
	Ram3 	: CltChCmd_Ram;
  //Variables:
		InternTime 	: DINT;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL IF_WindowRun
		VAR_INPUT
			whoami 	: ^_WHOAMI;
			pic 	: ^void;
			event 	: ^_EVENT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL IF_ChkEnable
		VAR_INPUT
			key 	: DINT;
		END_VAR
		VAR_OUTPUT
			retcode 	: BOOL;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL CalculateLevel;
	
	FUNCTION VIRTUAL GLOBAL Server0::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL TimeOut::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL TimeOut::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Key1::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Key1::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Key2::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Key2::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Key3::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Key3::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using Ram


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB _XAccess::@CT_
0$UINT,
2#0100000000000000$UINT, //TY__XACCESS
0$UINT, 1$UINT, (SIZEOF(::_XAccess))$UINT, 
5$UINT, 4$UINT, 0$UINT, 
TO_UDINT(3192771746), "_XAccess", //Class
TO_UDINT(3788417926), "_Global", 0$UINT, 15$UINT, //Baseclass
//Servers:
(::_XAccess.TimeOut.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3187968904), "TimeOut", 
(::_XAccess.Level.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1841172131), "Level", 
(::_XAccess.Key1.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(564635948), "Key1", 
(::_XAccess.Key2.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3098474646), "Key2", 
(::_XAccess.Key3.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3484010496), "Key3", 
//Clients:
(::_XAccess.Ram0.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1377238566), "Ram0", TO_UDINT(1903583397), "Ram", 1$UINT, 3$UINT, 
(::_XAccess.Ram1.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(621924016), "Ram1", TO_UDINT(1903583397), "Ram", 1$UINT, 3$UINT, 
(::_XAccess.Ram2.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3155730186), "Ram2", TO_UDINT(1903583397), "Ram", 1$UINT, 3$UINT, 
(::_XAccess.Ram3.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3407851420), "Ram3", TO_UDINT(1903583397), "Ram", 1$UINT, 3$UINT, 
END_FUNCTION


#define USER_CNT__XAccess 46

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT__XAccess] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION _XAccess::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= _Global::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= _Global::Server0.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, _Global::Server0.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT__XAccess;
	vmt.CmdTable.Write		:= #Server0::Write();
#pragma warning (disable : 74)
	vmt.UserFcts[2]		:= #IF_WindowRun();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[6]		:= #IF_ChkEnable();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[45]		:= #CalculateLevel();

#pragma warning (default : 74)
	_Global::Server0.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF _Global::Server0.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	TimeOut.pMeth			:= StoreMethod( #TimeOut::Read(), #TimeOut::Write() );
	IF TimeOut.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Key1.pMeth			:= StoreMethod( #Key1::Read(), #Key1::Write() );
	IF Key1.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Key2.pMeth			:= StoreMethod( #Key2::Read(), #Key2::Write() );
	IF Key2.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Key3.pMeth			:= StoreMethod( #Key3::Read(), #Key3::Write() );
	IF Key3.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
#pragma using _Lse


//*********************Inserted from .\_XAccess\_XAccess_00_00.st*********************



 



FUNCTION VIRTUAL GLOBAL _XAccess::IF_ChkEnable
VAR_INPUT
	key		: DINT;
END_VAR
VAR_OUTPUT
	retcode		: BOOL;
END_VAR

  retcode := TRUE; 

  if(key <> 0) then

    retcode := FALSE; 

    Key1 := TO_DINT(Ram1.Read()); 
    Key2 := TO_DINT(Ram2.Read());
    Key3 := TO_DINT(Ram3.Read());

    if(Server0 = Key3) then 
      if(key <= 3) then
        retcode := TRUE; 
      end_if; 
    elsif(Server0 = Key2) then 
      if(key <= 2) then
        retcode := TRUE; 
      end_if; 
    elsif(Server0 = Key1) then 
      if(key <= 1) then
        retcode := TRUE; 
      end_if; 
    end_if; 

	if(Key1=0)&(Key2=0)&(Key3=0)then
      retcode := TRUE;
	end_if;

  end_if; 

END_FUNCTION //VIRTUAL GLOBAL _XAccess::IF_ChkEnable
FUNCTION VIRTUAL GLOBAL _XAccess::IF_WindowRun
VAR_INPUT
	whoami		: ^_WHOAMI;
	pic		: ^VOID;
	event		: ^_EVENT;
END_VAR

  if(event^.ftype <> _EVENT_NONE) then
    InternTime := to_dint(Ops.tAbsolute); 
  else
    TimeOut := TO_DINT(Ram0.Read()); 
    if(TimeOut > 10000) then
      if((Ops.tAbsolute$DINT - InternTime) >= TimeOut) then
	    Server0 := 0; 
		CalculateLevel(); 
	  end_if; 
    end_if; 
  end_if; 

END_FUNCTION //VIRTUAL GLOBAL _XAccess::IF_WindowRun

FUNCTION VIRTUAL GLOBAL _XAccess::TimeOut::Write
VAR_INPUT
	input		: DINT;
END_VAR
VAR_OUTPUT
	result		: DINT;
END_VAR

  Ram0.Write(input); 
  TimeOut$DINT := input;
  result       := input;

END_FUNCTION //VIRTUAL GLOBAL _XAccess::TimeOut::Write

FUNCTION VIRTUAL GLOBAL _XAccess::TimeOut::Read
VAR_OUTPUT
	output		: DINT;
END_VAR

  TimeOut := Ram0.Read(); 
  output := TimeOut;

END_FUNCTION //VIRTUAL GLOBAL _XAccess::TimeOut::Read

FUNCTION VIRTUAL GLOBAL _XAccess::Key1::Read
VAR_OUTPUT
	output		: DINT;
END_VAR

  Key1   := Ram1.Read(); 
  output := Key1;

END_FUNCTION //VIRTUAL GLOBAL _XAccess::Key1::Read

FUNCTION VIRTUAL GLOBAL _XAccess::Key1::Write
VAR_INPUT
	input		: DINT;
END_VAR
VAR_OUTPUT
	result		: DINT;
END_VAR

  Ram1.Write(input); 
  Key1$DINT := input;
  result    := input;

END_FUNCTION //VIRTUAL GLOBAL _XAccess::Key1::Write

FUNCTION VIRTUAL GLOBAL _XAccess::Key2::Read
VAR_OUTPUT
	output		: DINT;
END_VAR

  Key2   := Ram2.Read(); 
  output := Key2;

END_FUNCTION //VIRTUAL GLOBAL _XAccess::Key2::Read

FUNCTION VIRTUAL GLOBAL _XAccess::Key2::Write
VAR_INPUT
	input		: DINT;
END_VAR
VAR_OUTPUT
	result		: DINT;
END_VAR

  Ram2.Write(input); 
  Key2$DINT := input;
  result    := input;

END_FUNCTION //VIRTUAL GLOBAL _XAccess::Key2::Write
FUNCTION VIRTUAL GLOBAL _XAccess::Key3::Read
VAR_OUTPUT
	output		: DINT;
END_VAR

  Key3   := Ram3.Read(); 
  output := Key3;

END_FUNCTION //VIRTUAL GLOBAL _XAccess::Key3::Read

FUNCTION VIRTUAL GLOBAL _XAccess::Key3::Write
VAR_INPUT
	input		: DINT;
END_VAR
VAR_OUTPUT
	result		: DINT;
END_VAR

  Ram3.Write(input); 
  Key3$DINT := input;
  result    := input;

END_FUNCTION //VIRTUAL GLOBAL _XAccess::Key3::Write


FUNCTION  VIRTUAL GLOBAL _XAccess::CalculateLevel
VAR
  lk  : DINT;  
  lo  : DINT; 
END_VAR

  lk := 0; 

  if(Server0 = Key3.Read()) then
    lk := 3; 
  elsif(Server0 = Key2.Read()) then
    lk := 2; 
  elsif(Server0 = Key1.Read()) then
    lk := 1; 
  end_if; 

  lo    := Level; 
  Level := lk; 

  if(lo <> lk) then
    InsertCMD(CMD_ACCESSCHANGED, 0, 0); 
  end_if; 


END_FUNCTION // _XAccess::CalculateLevel

FUNCTION VIRTUAL GLOBAL _XAccess::Server0::Write
VAR_INPUT
	input		: DINT;
END_VAR
VAR_OUTPUT
	result		: DINT;
END_VAR

  Server0$DINT := input;
  result       := input;
  CalculateLevel(); 

END_FUNCTION //VIRTUAL GLOBAL _XAccess::Server0::Write



